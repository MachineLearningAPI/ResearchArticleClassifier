University of Nebraska - Lincoln

DigitalCommons@University of Nebraska - Lincoln
Dissertations, Theses, and Student Research Papers
in Mathematics

Mathematics, Department of

8-2015

Graph centers, hypergraph degree sequences, and
induced-saturation
Sarah Lynne Behrens
University of Nebraska-Lincoln, s-sbehren7@math.unl.edu

Follow this and additional works at: http://digitalcommons.unl.edu/mathstudent
Part of the Discrete Mathematics and Combinatorics Commons
Behrens, Sarah Lynne, "Graph centers, hypergraph degree sequences, and induced-saturation" (2015). Dissertations, Theses, and Student
Research Papers in Mathematics. Paper 63.
http://digitalcommons.unl.edu/mathstudent/63

This Article is brought to you for free and open access by the Mathematics, Department of at DigitalCommons@University of Nebraska - Lincoln. It
has been accepted for inclusion in Dissertations, Theses, and Student Research Papers in Mathematics by an authorized administrator of
DigitalCommons@University of Nebraska - Lincoln.

GRAPH CENTERS, HYPERGRAPH DEGREE SEQUENCES, AND
INDUCED-SATURATION

by

Sarah Lynne Behrens

A DISSERTATION

Presented to the Faculty of
The Graduate College at the University of Nebraska
In Partial Fulfilment of Requirements
For the Degree of Doctor of Philosophy

Major: Mathematics

Under the Supervision of Professor Stephen Hartke

Lincoln, Nebraska
August, 2015

GRAPH CENTERS, HYPERGRAPH DEGREE SEQUENCES, AND
INDUCED-SATURATION
Sarah Lynne Behrens, Ph.D.
University of Nebraska, 2015
Adviser: Stephen Hartke
The center of a graph is the set of vertices whose distance to other vertices is minimal.
The centralizing number of a graph G is the minimum number of additional vertices in
any graph H where V (G) is the center of H. Buckley, Miller, and Slater and He and
Liu provided infinite families of graphs with each centralizing number. We show the
number of graphs with each nonzero centralizing number grows super-exponentially
with the number of vertices. We also provide a method of altering graphs without
changing the centralizing number and give results about the centralizing number of
dense graphs.
The degree sequence of a (hyper)graph is the list of the number of edges containing
each vertex. A t-switch replaces t edges with t new edges while maintaining the same
degree sequence. For graphs, it has been repeatedly shown that any realization of a
degree sequence can be turned into any other realization by a sequence of 2-switches.
However, Gabelman provided an example to show 2-switches are not sufficient for kgraphs with k ≥ 3. We classify all pairs of 3-graphs that do not admit a 2-switch but
differ by a 3-switch. We use this to provide support that 2-switches and a 3-switch
are sufficient for 3-graphs.
Given graphs G and H, G is H-saturated if G does not contain H as a subgraph,
but H is a subgraph of G + e for any e ∈
/ E(G). While this is well defined for
subgraphs, the similar definition is not well defined for induced subgraphs. To avoid

this, Martin and Smith defined the induced-saturation number using trigraphs. We
show that the induced-saturation number of stars is zero. This implies the existence
of graphs that are star induced-saturated. We introduce the parameter indsat∗ (n, H)
which is the minimum number of edges in an H-induced-saturated graph, when one
exists. We provide bounds for indsat∗ (n, K1,3 ) and compute it exactly for infinitely
many n.

iv
COPYRIGHT
c 2015, Sarah Lynne Behrens

v
ACKNOWLEDGMENTS
This dissertation would not have been completed without the support of many friends
and family. My parents were extremely supportive throughout my entire time as a
graduate student. My friends and adoptive family at First Christian Church made
Lincoln very quickly feel like home.
I would like to thank my advisor Stephen Hartke for his guidance over the past few
years. I would also like to thank my committee members Jamie Radcliffe, Christine
Kelley, Mohammad Rammaha, and Berthe Choueiry for their support.
I would not have gone to graduate school without the encouragement of my undergraduate advisor Jonathan White. He introduced me to mathematical research
and inspired me to pursue an advanced degree.
As a graduate student I was fortunate enough to have opportunities to do research
with graduate students from other universities. In particular I would like to thank
Douglas West for being able to participate in the Combinatorics Research Experience
for Graduate Students at the University of Illinois Urbana-Champaign. Through
that program I met most of my collaborators. In particular I met Catherine Erbes,
with whom I collaborated on two separate research papers. I enjoyed writing (and
rewriting) those papers with Cathy.
When I first moved to Lincoln, it was excellent being able to live with Christina
Edholm and Julia St. Goar. It was pleasant both academically and socially having
other graduate students around. For day to day sanity, I am forever grateful to my
officemates Caitlyn Parmelee and Kat Shultis. We regularly helped each other with a
variety of things such as proofreading and teaching tips. I also enjoyed our calendar
trivia and snowflakes, which we maintained even when we were in different states.
If I ever hit a wall with research, I was always able to go bounce ideas off of James

vi
Carraher or Lauren Keough. I am very appreciative of the tips and tricks they have
shared with me through the years. Possibly the most tedious part of graduate school
was grading exams. Those were made much more pleasant when I was able to grade
with other graduate students. The most common one was with Ethan Twisdale. I
am thankful for the company and moral support he provided over the years. Special
thanks to Marilyn Johnson, who helped me get all of my paperwork turned in on
time. Additionally, she was always willing to listen to how things were going, even if
I just needed to destress.
Finally I would like to thank all of the faculty and graduate students that I have
met while at UNL. I am sure there are more names that I have missed. I truly
appreciate all the help that I have received over the years.

vii
GRANT INFORMATION
This work was supported in part by the National Science Foundation grants DMS0914815, DMS-0838463, and DMS-0838434

viii

Contents
List of Figures

x

List of Tables

xii

List of Algorithms

xiii

1 Introduction

1

2 Graph centers

8

2.1

2.2

2.3

2.4

Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

9

2.1.1

Preliminaries . . . . . . . . . . . . . . . . . . . . . . . . . . .

11

2.1.2

Background . . . . . . . . . . . . . . . . . . . . . . . . . . . .

13

Algorithm for the centralizing number of a graph . . . . . . . . . . .

15

2.2.1

Floyd-Warshall algorithm and extension . . . . . . . . . . . .

16

2.2.2

Selecting N1 . . . . . . . . . . . . . . . . . . . . . . . . . . . .

17

2.2.3

Selecting N2 . . . . . . . . . . . . . . . . . . . . . . . . . . . .

17

2.2.4

Beyond adding two vertices . . . . . . . . . . . . . . . . . . .

18

2.2.5

Complexity . . . . . . . . . . . . . . . . . . . . . . . . . . . .

19

Computational results . . . . . . . . . . . . . . . . . . . . . . . . . .

20

2.3.1

Centralizing number of small graphs . . . . . . . . . . . . . .

20

2.3.2

Radius and diameter of centralizers . . . . . . . . . . . . . . .

20

Effect of cloning and twinning vertices on A(G) . . . . . . . . . . . .

27

ix
2.5

Centralizing number of dense graphs . . . . . . . . . . . . . . . . . .

2.6

The asymptotic number of graphs on n vertices with given centralizing
number

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

3 Hypergraphs
3.1

37

47
52

Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

53

3.1.1

Realizability . . . . . . . . . . . . . . . . . . . . . . . . . . . .

53

3.1.2

Connectedness . . . . . . . . . . . . . . . . . . . . . . . . . . .

55

3.1.3

Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

56

3.2

Classification of pseudo-threshold 3-graphs . . . . . . . . . . . . . . .

57

3.3

Hypergraphs with no 2-switch . . . . . . . . . . . . . . . . . . . . . .

69

3.4

Slanted sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

75

3.5

Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

77

3.5.1

Obtaining a “good” realization . . . . . . . . . . . . . . . . .

77

3.5.2

Packing k-graphic sequences . . . . . . . . . . . . . . . . . . .

78

4 Induced-saturation
4.1

86

Background and introduction . . . . . . . . . . . . . . . . . . . . . .

87

4.1.1

Notation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

89

4.1.2

Observations and previous results . . . . . . . . . . . . . . . .

89

4.1.3

Minimally H-induced-saturated graphs . . . . . . . . . . . . .

90

4.2

Stars . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

91

4.3

The claw . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

94

4.4

Families of graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108

Bibliography

111

x

List of Figures
2.1

Hedetniemi’s construction showing any graph G is the center of another
graph. Given a graph G, add vertices w1 , w2 , w3 , and w4 with w1 and w2
adjacent to every vertex of G, w3 adjacent to w1 , and w4 adjacent to w2 .
In particular, this construction shows A(G) ≤ 4. . . . . . . . . . . . . . .

9

2.2

The smallest graphs with centralizing number three. . . . . . . . . . . . .

21

2.3

An example showing the upper bound of Proposition 2.3.1 for A(G) = 3
is sharp. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.4

An example where cloning a vertex causes the centralizing number to
decrease from three to two. . . . . . . . . . . . . . . . . . . . . . . . . .

2.5

23

33

The graphs shown in (a) and (c) have centralizing number four. When
cloning vertex v of (a), the resulting graph has centralizing number two.
A centralizer is shown in (b). Similarly, cloning vertex v of (c) results with
a graph with centralizing number three, and a centralizer is shown in (d).

2.6

33

The graph in (a) is the centralizer for the subgraph induced by the solid
vertices. The graph formed by twinning vertex v has lower centralizing
number, as shown in (b). . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.7

34

These graphs can be used to generate an infinite family of graphs with
centralizing number three or four. . . . . . . . . . . . . . . . . . . . . . .

36

xi
2.8

The graph G4 (n). The circle indicates a clique of n − 5 vertices, with x, y,
and z adjacent to each vertex in the clique. . . . . . . . . . . . . . . . . .

2.9

39

Graphs described in Subcase 2. In both graphs, C is a clique and p2 is
adjacent to every vertex of C \ {c1 , c2 }. In (a), p1 is adjacent to every
vertex of C \ {c1 }. In (b), p1 is adjacent to every vertex of C \ {c3 }. . . .

45

2.10 Graphs described in Subcase 3. In each graph, C is a clique. . . . . . . .

46

2.11 The graph above is the graph J4 (G) as described in Theorem 2.6.4. Vertices x and t are adjacent to every vertex of G. Delete vertex z to obtain
the graph J3 (G). . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.1

50

Assume |a| ≤ |b| ≤ |c| and |a| ≤ |d|. Given the sign (nonnegative or
nonpositive) of the values a, b, c, and d, the signs of most of the entries in
the third row and third column are also determined. The question mark
represents entries with nondetermined signs. . . . . . . . . . . . . . . . .

62

3.2

The four ways to fill out the question marks from Figure 3.1i. . . . . . .

65

3.3

An example of how a 3-switch can be accomplished by using 2-switches. .

70

3.4

An example of a 3-switch on 6 vertices. . . . . . . . . . . . . . . . . . . .

70

3.5

A transversal 3-switch. . . . . . . . . . . . . . . . . . . . . . . . . . . . .

75

4.1

A 4-regular K1,3 -induced-saturated graph. Vertices in R(G) are white,
and vertices in B(G) are gray. . . . . . . . . . . . . . . . . . . . . . . . . 100

4.2

These graphs are K1,3 -induced-saturated. . . . . . . . . . . . . . . . . . . 106

xii

List of Tables
2.1

A(G) distributions for fixed n. The first number is the total number of
connected graphs on n vertices with A(G) = t while the second number is
a percentage out of all connected graphs on n vertices. . . . . . . . . . .

21

2.2

The total computation time for fixed n. . . . . . . . . . . . . . . . . . . .

21

3.1

List of weights of triples whose sign is not determined. . . . . . . . . . .

67

3.2

The complete list of non-isomorphic pseudo-threshold 3-graphs, each represented by the matrix with the given weights. . . . . . . . . . . . . . . .

4.1

68

Values of indsat(n, K1,3 ) for 4 ≤ n ≤ 10 along with trigraphs realizing
those values. All K1,3 -induced-saturated graphs for n = 9 and n = 10 are
shown. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

95

xiii

List of Algorithms
1

Computes if a graph has centralizing number zero, two, or greater than
two. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

16

2

Finds triples whose weight is not determined for Case 3.2a . . . . . .

66

3

Finding possible vertex weights for Case 3.2a . . . . . . . . . . . . . .

67

4

Isolated pairs on 8 vertices . . . . . . . . . . . . . . . . . . . . . . . .

71

5

Isolated pairs on 9 vertices . . . . . . . . . . . . . . . . . . . . . . . .

72

1

Chapter 1
Introduction

2
This thesis has two major mathematical topics. The first topic is about understanding graphs that contain a subgraph in a specified way. Chapter 2 focuses on the
subgraph being contained as the center, while Chapter 4 focuses on containment of
induced copies of the specified subgraph. The second topic, which we study in Chapter 3, is examining hypergraph realizations of degree sequences. We are interested in
specific methods to move among these realizations by making small changes and we
focus on obstructions to this ability.
A recent trend in mathematics is the use of experimental mathematics: applying
computational techniques to suggest theorem statements or provide counterexamples.
Much of the work within this thesis is motivated by experimental results generated
with a computer. These computations led to insights that in turn suggested conjectures and theorems. In addition, computations can be used within proofs of theorems,
such as the Four Color Theorem [3, 77], Hales’ proof of the Kepler conjecture [45],
and the nonexistence of the projective plane of order ten [60]. In this thesis, we also
use computation to prove some of our results.
In Chapter 2, we investigate centers of graphs. A graph G is an ordered pair of
a vertex set V (G) and edge set E(G) such that each edge consists of two distinct
vertices. The center of a graph is the set of vertices whose distance to other vertices
is minimal.
Centers of graphs have been of interest for such applications as facility location
and social networks. For example, when building an emergency facility such as a
hospital, it should be placed so it is not too far from any one location. Similarly,
consumers want to be located in places that are close to their desired services. For
some recent papers, see [20, 21, 80]. See Buckley [16] for a survey, as well as [17, 18,
22, 23, 46, 48, 50, 61, 75].
Graphs whose center is the entire vertex set are called self-centered. Not all graphs

3
are self-centered. Buckley, Miller, and Slater [18] introduced the centralizing number
A(G) of a graph G, which is the minimum number of vertices that must be added
to G to form a supergraph H where the subgraph induced by the center of H is
isomorphic to G. Hedetniemi (see [18]) gave a construction showing the centralizing
number is at most four. The centralizing number acts as a measure of how close a
graph is to being self-centered.
Buckley et al. [18] determined the centralizing number of trees, classifying every
tree with at least three vertices to have centralizing number two or four. However, they
did not know if there existed any graphs with centralizing number three. Chen [24]
and Bielak [11] provided the earliest examples of graphs with centralizing number
three. He and Liu [67, 63] showed that, in fact, there are infinitely many graphs with
centralizing numbers three and four. The natural next question is how rare these
graphs are. In particular, what proportion of graphs on n vertices have centralizing
number three or four? We develop an algorithm that we use to compute the exact
number of graphs on at most twelve vertices with each centralizing number. This
data suggests the number of graphs with each centralizing number is increasing for
all n. We prove this statement, showing that the rate of increase is super-exponential.
Buckley et al. [18] gave a classification of the centralizing number for the sparsest
graphs, trees. For very dense graphs, we prove the centralizing number is two unless
the graph is one of two special cases and is self-centered. Additionally, we conjecture
that the densest graphs with centralizing number three and four belong to specific
families, and provide evidence toward this conjecture.
In Chapter 3 we investigate degree sequences of hypergraphs. A hypergraph is an
ordered pair of a vertex set and an edge set, where edges are subsets of the vertices.
Note that we only consider simple hypergraphs, where no edge can be repeated. A
hypergraph is k-uniform if every edge contains exactly k vertices. Graphs are 2-

4
uniform hypergraphs. The degree of a vertex is the number of edges containing that
vertex. The degree sequence of a hypergraph H is the list of all vertex degrees with
their multiplicities, listed in nonincreasing order. We say H realizes that sequence. A
sequence of nonnegative integers is k-graphic if there exists a k-uniform hypergraph
realizing that sequence.
The fundamental question in the area of hypergraph degree sequences is which
sequences of nonnegative integers are k-graphic. In the case of k = 2, this problem is well understood, with many characterizations of 2-graphic sequences. Two of
the most well known characterizations are the Havel-Hakimi [47, 44] and the Erd˝osGallai [33] characterizations. Other characterizations are surveyed by Sierskma and
Hoogeveen [79] and Mahadev and Peled [68]. However, there are significantly fewer
results for k ≥ 3.
Achuthan, Achuthan and Simanihuruk [1], Billington [13], and Choudum [25] gave
some necessary conditions for a sequence to be k-graphic. Unfortunately, Achuthan
et al. showed that none of these necessary conditions from [1, 13, 25] are sufficient.
In fact, there are surprisingly few sufficient conditions for a sequence to be k-graphic
for any k ≥ 3.
Finding a minimal set of switches that connects the space of realizations has applications in network science; specifically, generating a realization chosen uniformly at
random, which can be done using Markov chain Monte Carlo methods. The connectivity of the space for 2-graphs allows for uniform random sampling. For some results
of using Markov chains for 2-graphs, see [35, 43, 52, 76]. Additionally, the Markov
Chain Monte Carlo methods can be used to give an approximation of the number
of realizations for a degree sequence [51]. If we have set of switches connecting the
space of 3-graph realizations, then we can use Markov Chain Monte Carlo with the
realizations of a 3-graphic sequence as well.

5
We make small changes to move from one realization to another by replacing a
set of edges with another set of edges. A t-switch on a hypergraph H is replacing
t edges with t other edges such that the resulting hypergraph has the same degree
sequence as the original hypergraph. If a t-switch can be performed on a hypergraph,
we say the hypergraph admits a t-switch. Given a k-graphic degree sequence π and a
collection of switches S, we say the space of realizations of π is connected by S if for
any two k-graph realizations of π, one can be obtained from the other by performing
a sequence of switches from S.
Petersen [71] and subsequently others (for instance, Fulkerson, Hoffman, and
McAndrew [39]) showed that, for any two realizations of a 2-graphic sequence, one
realization can be obtained from the other by a sequence of 2-switches. However,
Gabelman [40] demonstrated that 2-switches are not enough for hypergraphs. These
examples were further generalized showing that a k-switch is needed for k-graphs,
which leads to the questions of what other examples are there that are not connected
by 2-switches and what is the minimal set of switches required to connect the space of
realizations. Many results about 2-graphic sequences rely on the fact that the space
of 2-graphic realizations is connected by 2-switches. If we know a minimum set of
moves that connect the space of realizations for 3-graphic sequences, then it is likely
that similar results can be proven for 3-graphic sequences.
The main result of Chapter 3 is a characterization of all pairs of 3-graphs that
differ by a 3-switch but do not admit 2-switches. These 3-graphs are all related to the
generalized Gabelman examples. This result provides evidence that the collection of
2-switches along with a specific 3-switch is enough to connect the space of realizations
for 3-graphic sequences.
Since the previous result restricts to 3-graphs that do not admit a 2-switch, we
also examine sequences similar to the degree sequences that we know have a realiza-

6
tion space not connected by 2-switches. In particular, we look at sequences that do
not have repeated terms and few realizations. These sequences seem like the most
likely candidates for degree sequences whose realization space is not connected by
2-switches, as fewer realizations have less room to move. Additionally, if there are
repeated terms, then there is an increase in the number of realizations by the number
of isomorphic copies. This provides more support that the collection of 2-switches
along with a specific 3-switch (which we call a transversal 3-switch) is enough to
connect the space of realizations for 3-graphic sequences. As an application of using
switches, we also provide a result about packing hypergraphs.
In Chapter 4, we investigate a new version of the saturation number. The saturation number of a graph is a very classic parameter. The saturation number sat(n, H)
for parameters n and graph H is the minimum number of edges in any graph G on
n vertices such that H is not a subgraph of G, but H is a subgraph if any edge is
added to G.
Erd˝os, Hajnal, and Moon [34] proved the earliest saturation result, computing the
saturation number for complete graphs. K´aszonyi and Tuza [54] expanded upon their
work and showed that the saturation number for any graph on t vertices is less than
the saturation number of the complete graph on t vertices. A survey of results related
to the saturation number is provided by Faudree, Faudree, and Schmitt [36].
H is an induced subgraph of G if the vertices that H appears on have no other
edges. For any graph H, adding enough edges to G eventually results in G containing
H as a subgraph, but not necessarily as an induced subgraph. This lack of monotonicity leads to the need of a different definition for an induced subgraph version of
the saturation number. Recently Martin and Smith [69] introduced a new definition
relating induced graphs to trigraphs instead of graphs. A trigraph has a vertex set
and each pair of vertices is either an edge, nonedge, or potential edge. A realiza-

7
tion of a trigraph is a graph with the same vertex set and whose edge set consists
of all edges of the trigraph and any subset of the potential edges. A trigraph T is
H-induced-saturated if no realization of T contains an induced H, but changing any
edge or nonedge to a potential edge creates a realization containing H as an induced
subgraph. The induced-saturation number of a graph H with respect to n is the
minimum number of potential edges in a trigraph on n vertices that is H-induced
saturated. Martin and Smith computed the induced-saturation number for the path
on four vertices.
We determine the induced-saturation number for stars to be zero for sufficiently
large n. This means that there are star-induced-saturated graphs that do not have potential edges in the trigraph. In such a case, we introduce the parameter indsat∗ (n, H)
to be the minimal number of edges in any H-induced-saturated graph on n vertices.
We bound this parameter for the claw (a specific star) and provide the exact value
for infinitely many values of n.

8

Chapter 2
Graph centers

9

2.1

Introduction

Given a graph G, the centralizing number of G is the minimum number of additional vertices in a graph H where G is isomorphic to the center of H. Kopylov and
Timofeev [58] stated that for any graph G there exists such a graph H. Hedetniemi
(see [18]) gave the construction of Figure 2.1 showing that the centralizing number
of any graph is at most four. Buckley, Miller, and Slater [18] formally introduced the

w3

w1

G

w2

w4

Figure 2.1: Hedetniemi’s construction showing any graph G is the center of another
graph. Given a graph G, add vertices w1 , w2 , w3 , and w4 with w1 and w2 adjacent
to every vertex of G, w3 adjacent to w1 , and w4 adjacent to w2 . In particular, this
construction shows A(G) ≤ 4.
concept of centralizing number and showed that every tree has centralizing number
two or four. However, they did not find a graph with centralizing number three, and
they asked if such a graph exists. Chen [24] and Bielak [11] answered affirmatively,
Liu and He [67] provided an infinite family of graphs with centralizing number three,
and Liu [63] provided an infinite family of graphs with centralizing number four.
In this chapter, we investigate the number of connected graphs on n vertices with
a given centralizing number. We develop a practical algorithm for computing the
centralizing number of a given graph, and use an implementation of the algorithm
to determine the exact number of connected graphs on at most twelve vertices with
each centralizing number. We examine centralizers generated by the algorithm to
study properties of centralizers, such as their radius. In order to generate infinite
families of graphs with centralizing number three or four, we provide results on the

10
effect twinning vertices has on the centralizing number of a graph. As an application
of twinning vertices, we create families of graphs which we conjecture to be the
densest graphs with centralizing number three or four. We conclude by providing a
lower bound of the asymptotics for the number of graphs on n vertices with a given
centralizer.
Centers of graphs have been of interest in topics such as facility location problems
and social network problems. For example, when building an emergency facility such
as a hospital, it should be placed so it is not too far from any one location. Similarly,
consumers want to be located in places that are close to their desired services. For
some recent papers, see [20, 21, 80]. Additionally, see Buckley [16] for a survey, as
well as [17, 18, 22, 23, 46, 48, 50, 61, 75]. Since not all graphs are self-centered, we use
the centralizing number as a measure of how close a graph is to being self-centered.
We primarily focus on graphs with nonzero centralizing number.
Furthermore, it is not always ideal to have resources located in the center of a
graph as described above. As suggested by Klavˇzar, Narayankar, and Walikar [55], a
variant of this is placing two resources for the network that can efficiently serve the entire network, but need to be kept far apart due to interference. Klavˇzar, Narayankar,
and Walikar referred to graphs containing all but two vertices in their center as almost self-centered graphs (ASC graphs). They provided a construction generating
ASC graphs that is similar to twinning vertices. Balakrishnan, Breˇsar, Changat,
Klavˇzar, Peterin, and Subhamathi [4] studied median and chordal ASC graphs. Note
the center of any ASC graph has centralizing number at most two.
The centralizing number of several families of graphs have been determined. Buckley, Miller, and Slater [18] determined the centralizing number of trees, and Bielak [11]
identified the centralizing number of all block graphs. Other infinite families of graphs
with centralizing number two and three were found by He and Liu [67, 63]. We use

11
twinning of vertices to generate distinct infinite families of graphs with centralizing
number three and four.
Kopylov and Timofeev [58] also focused on centralizers as their own entity instead
of relating the centralizers to their central subgraph. They bounded the number of
edges in a centralizer with respect to the number of vertices in its periphery. We
pursue bounds on the number of edges in a graph with given centralizing number.
This chapter is organized as follows. Relevant definitions and notation are given in
Section 2.1.1. In Section 2.2 we present an algorithm for computing the centralizing
number of a graph. Section 2.3 contains the details of our implementation of the
algorithm and the exact number of connected graphs on up to twelve vertices with
each centralizing number, as well as questions that arose from examining examples
generated by computations. The effect that twinning vertices has on the centralizing
number of graphs is examined in Section 2.4. Section 2.5 contains an application of
twinning vertices to create dense graphs with centralizing number greater than two.
We further conjecture that these families are the densest such graphs and provide
support for the conjecture. We conclude with the asymptotics of the number of
graphs on n vertices with a given centralizer in Section 2.6.

2.1.1

Preliminaries

In general we follow the terminology and notation of West [84]. Let G be a graph with
u, v ∈ V (G). The eccentricity of v in G, denoted

G (v),

is the maximum distance in G

from v to any other vertex. The horizon of v in G, horG (v), is the set of vertices in G
that are at distance

G (v)

from v in G. If v is adjacent to every vertex in V (G) \ {v},

then v is a dominating vertex of G, or v dominates G, and

G (v)

= 1. The radius

of G, denoted rad(G), is the minimum eccentricity of any vertex of G, while the

12
diameter of G, denoted diam(G), is the maximum eccentricity of any vertex of G.
Vertices u and v are diametral if dG (u, v) = diam(G). Additionally, v is a pendant in
G if degG (v) = 1.
The center of a graph G is the set of vertices whose eccentricity is the radius of
G. The central subgraph C(G) is the subgraph induced by the vertices in the center
of G. The periphery P (G) of G is the set of vertices whose eccentricity equals the
diameter of G.
Definition 2.1.1. The centralizing number A(G) of a graph G is the minimum number of additional vertices in a graph H where G is isomorphic to the center of H. In
other words,
A(G) = min{|V (H)| − |V (G)| : C(H) ∼
= G}.
H

A graph H is called a centralizer of a graph G if C(H) = G and |V (H)\V (G)| = A(G).
Note that in general, a centralizer of G is not unique.
If a graph has centralizing number zero, then we say the graph is self-centered.
Alternatively, a graph G is self-centered if rad(G) = diam(G). Note that if G is a
disconnected graph, then technically G is self-centered since every vertex has infinite
eccentricity. Henceforth we will assume all graphs are connected.
We also introduce the following notation for convenience throughout the paper.
Let G be a graph with centralizing number two or three, and let H be a centralizer
of G. If A(G) = 2, then let w1 and w2 be the peripheral vertices of H; if A(G) = 3,
then let w1 , w2 , and w3 be the peripheral vertices of H. Since the farthest vertex
from a vertex in P (H) must be another vertex of P (H), at least two pairs of the
three peripheral vertices must be diametral if A(G) = 3. Throughout this paper
we assume that if P (H) = {w1 , w2 , w3 }, then diam(H) = dH (w1 , w2 ) = dH (w1 , w3 ).

13
Define Ni = NH (wi ) for 1 ≤ i ≤ A(G). The peripheral neighborhood distance is
dH (N1 , N2 ), which we denote by the letter p.

2.1.2

Background

As shown by Hedetniemi’s construction (Figure 2.1), the centralizing number of a
graph is at most four. Given a graph G with nonzero centralizing number and centralizer H, any farthest vertex from a vertex in P (H) must be another vertex of
P (H). Hence there are no graphs with centralizing number one. Thus the centralizing number of any graph is either zero, two, three, or four.
Buckley, Miller, and Slater [18] determined the centralizing number of every tree,
showing that only some of the numbers are attained.
Theorem 2.1.2 ([18]). Let T be a tree with at least three vertices. If any two leaves
of T are equidistant from the center of T , then A(T ) = 2. Otherwise, A(T ) = 4.
This yields an infinite class of graphs with centralizing number two and another
infinite class with centralizing four, but no examples with centralizing number three.
Chen [24] proved the following lemma for graphs with centralizing number two, applying it to prove a specific graph had centralizing number three. Liu [63] adapted
Chen’s lemma to include graphs with centralizing number three.
Lemma 2.1.3 ([24, 63]). Let G be a graph with centralizing number two or three,
and let H be a centralizer of G. If A(G) = 2, then let w1 and w2 be the peripheral
vertices of H; if A(G) = 3, then let w1 , w2 , and w3 be the peripheral vertices of H
with diam(H) = dH (w1 , w2 ) = dH (w1 , w3 ).

14
1. diam(H) = p + 2 and rad(H) = p + 1. Thus for any x ∈ V (H),

H (x)

=




p + 2, for x ∈ P (H);


p + 1, for x ∈ V (G).

2. 1 ≤ p ≤ rad(G).
3. Let x1 ∈ N1 , and for fixed i where 2 ≤ i ≤ A(G), let xi ∈ Ni . Then
a) dH (x1 , xi ) = dG (x1 , xi ) ∈ {p, p + 1}.
b) p = dH (N1 , Ni ) = dG (N1 , Ni )
= dH (x1 , Ni ) = dG (x1 , Ni )
= dH (xi , N1 ) = dG (xi , N1 ).
Moreover, if A(G) = 3 then p = dH (x1 , N2 ∪ N3 ) = dG (x1 , N2 ∪ N3 ).
4. Suppose that v ∈ V (G) has degree one in G and u is its neighbor in G. Then
a) v is an element of some Ni , and
b) u and v cannot belong to the same Ni .
5. Suppose diam(G) > rad(G) + 1 and u, v are vertices of G such that dG (u, v) =
diam(G). If A(G) = 2 then u and v cannot belong to different Ni . If A(G) = 3
then we cannot have u ∈ N1 with v ∈ N2 ∪ N3 , nor v ∈ N1 with u ∈ N2 ∪ N3 .
Observe that if a graph G has centralizing number two or three, then the periphery
of any centralizer H of G consists of exactly the vertices that are not in C(H).
Additionally, observe that p ≥ 1 from statement (2) implies that w1 and w2 are not
adjacent and have no common neighbors. If A(G) = 3, the same also holds for w1
and w3 . However, w2 and w3 may be adjacent and may have common neighbors.
Furthermore, we can improve the lower bound on p when A(G) = 3.

15
Lemma 2.1.4. If G has centralizing number 3 and H is a centralizer, then p ≥ 2.
Proof. Suppose H is a centralizer of G with p = 1. Construct the graph H from H
by identifying w2 and w3 : V (H ) = V (G) ∪ {w1 , w2 } and E(H ) = E(G) ∪ {w1 v :
v ∈ N1 } ∪ {w2 v : v ∈ M }. We show that H contains G as its center, contradicting
the fact that A(G) = 3. Note that dH (w1 , w2 ) = dH (w1 , w2 ) = 3, and so
H

H

(w1 ) =

(w2 ) = 3.
It is left to show that

H

(v) = 2 for v ∈ V (G). Let u ∈ V (H ), and let P be a

shortest u, v-path in H. If P does not contain w3 , then P is also a path in H . If
P does contain w3 , then we construct a u, v-path in H by replacing w3 with w2 and
shortening if P already contained w2 . Hence

H

(v) ≤

cannot be adjacent to both w1 and w2 , and so

H

(v) = 2.

H (v)

= 2. Since p ≥ 1, v

It is worth noting that if G has centralizing number at most three and H is
a centralizer of G, then each vertex of P (H) is adjacent to some vertex of C(H).
However, this is not the case in Hedetniemi’s construction of a centralizer for any
graph G with A(G) = 4.

2.2

Algorithm for the centralizing number of a
graph

We present a practical algorithm to compute the centralizing number of small graphs.
The fundamental idea of the algorithm is to first check if a graph G is self-centered.
If not, we add two vertices w1 and w2 to G in all possible ways in order to create a
centralizer H. If still no centralizer is found, then three vertices are added to G in
all possible ways to create a centralizer. If still no centralizer is found, then G has
centralizing number four. A description in pseudocode of this method for checking if

16
a graph has centralizing number at most two is in Algorithm 1. The two main ideas
that make the algorithm practical are an extension of the Floyd-Warshall algorithm
and the selection of feasible neighborhoods of w2 . We describe each step in detail in
the remainder of this section.
Algorithm 1 Computes if a graph has centralizing number zero, two, or greater than
two.
Input: A graph G with n vertices.
Output: Returns whether the centralizing number is 0, 2, or greater than 2.
Use the Floyd-Warshall algorithm on G to compute pairwise distances.
if G is self-centered then return A(G) = 0
for S ⊆ V (G) with |S| ≤ n2 do
Create G from G by adding a vertex w1 with NG (w1 ) = S.
Use the Floyd-Warshall extension on G to update pairwise distances.
for feasible T ⊆ horG (w1 ) with |T | ≥ |S| do
Create H from G by adding vertex w2 with NH (w2 ) = T .
Use the Floyd-Warshall extension on H to update pairwise distances.
if C(H) ∼
= G then return A(G) = 2
return A(G) > 2

2.2.1

Floyd-Warshall algorithm and extension

In order to compute the eccentricity of every vertex of a graph G, we compute the
pairwise distances by applying the well known Floyd-Warshall algorithm [37, 83] to
G. The output of the Floyd-Warshall algorithm is a pairwise distance matrix DG ,
where DG [i, j] is the distance from vertex i to vertex j in G. The main idea of
k
k
the Floyd-Warshall algorithm is to compute intermediate matrices DG
where DG
[i, j]

represents the distance from vertex i to vertex j by using only the first k vertices as
n
= DG when G has n vertices. The Floyd-Warshall
intermediate vertices. Hence DG

algorithm runs in O(n3 ) time; see [30] for more information. We use an optimized
implementation of the Floyd-Warshall algorithm from Valerio [78].

17
When we compute the matrices DG and DH , we could apply the Floyd-Warshall
algorithm again. However, we have already computed DG , and so we use an extension
of the Floyd-Warshall algorithm to compute DG from DG . We begin by computing
n
DG
, where G has n vertices and G has n + 1 vertices. After copying the pairwise
n
distances DG [i, j] to DG
[i, j] for 1 ≤ i, j ≤ n, we need only compute entries of
n
DG
that are the distances to w1 . For each vertex i, 1 ≤ i ≤ n, we have that
n+1
n
d(i, w1 ) = 1 + min{d(i, j) : jw1 ∈ E(G )}. Next, we compute DG
from DG
with

one iteration of the Floyd-Warshall algorithm. The creation of DG from DG runs in
O(n2 ) time.
We use this same extension to compute DH from DG . This extension can be
generalized to computing DH for any graph H from DG where G is an induced
subgraph of H.

2.2.2

Selecting N1

Given a centralizer H, we arbitrarily name the peripheral vertices w1 and w2 . Hence
we may assume that degH (w1 ) ≤ degH (w2 ). Since Lemma 2.1.3 (2) implies that w1
and w2 do not have any common neighbors, we conclude that |N1 | ≤ n2 . Furthermore,
we check possible neighborhoods of w1 in order of increasing size. This heuristic
improves the running time since most small graphs have at least one centralizer with
a peripheral vertex of low degree.

2.2.3

Selecting N2

As described in Algorithm 1, we add vertices w1 and w2 to G in separate steps instead
of simultaneously. This allows us to eliminate some vertices of G as possible neighbors
for w2 based on the neighborhood of w1 .

18
Theorem 2.2.1. Suppose G is a graph with centralizing number two. Let H be a
centralizer of G with peripheral vertices w1 and w2 . Let G be the subgraph of H
induced by V (G) ∪ {w1 }, and let S = {v ∈ V (G) : dG (v, u) ≤

G

(w1 ) ∀u ∈ NG (w1 )}.

Then N2 ⊆ horG (w1 ) ∩ S.
Proof. There exists y ∈ V (G) such that dG (y, w1 ) =
but dG (x, w1 ) =

G

G

(w1 ). Suppose that x ∈ N1

(w1 ). Since H is a centralizer, dH (w1 , w2 ) ≥ dH (w1 , x). Also,

since every path in G is also a path in H, we have that dH (w1 , x) ≤ dG (w1 , x).
If dH (w1 , x) < dG (w1 , x), then w2 must be on a shortest w1 , x-path in H. This
would imply that dH (w1 , w2 ) < dH (w1 , x), which is a contradiction.

Hence we

have dH (w1 , x) = dG (w1 , x). Similarly dH (w1 , y) = dG (w1 , y). Then dH (w1 , w2 ) ≤
dH (w1 , y) + 1 ≤ dH (w1 , x), which is a contradiction. Hence N2 ⊆ horG (w1 ).
Let v ∈ N2 . Since N2 ⊆ horJ (w1 ), then dH (v, N1 ) =
(3b), p =

J (w1 )

J (w1 )

− 1. By Lemma 2.1.3

− 1. Lemma 2.1.3 (3a) implies dG (u, v) ∈ { J (w1 ) − 1,

J (w1 )}

for

any u ∈ N1 . Therefore v ∈ S.
Thus, the neighbors of w2 must be in the set horG (w1 ) ∩ S. It is worth noting
that we do not eliminate a vertex v as a possible neighbor of w2 by checking if
dG (v, u) ≥

G

(w1 ) − 1 for all u ∈ NG (w1 ), since this is implied from v ∈ horG (w1 ).

Furthermore, since we assumed that degH (w1 ) ≤ degH (w2 ), it is often the case that
| horG (w1 ) ∩ S| is smaller than the degree of w1 , and the algorithm simply moves on
to the next neighborhood for w1 .

2.2.4

Beyond adding two vertices

After checking that a graph is not self-centered, we compute the diameter of the
graph. If it is not self-centered but has a diameter of two, we know that the graph
must have centralizing number two from Lemma 2.5.5.

19
When attempting to create a centralizer by adding three vertices instead of two,
the same ideas apply. Recall that {w1 , w2 } and {w1 , w3 } are diametral pairs. Instead
of concluding that N2 ⊆ S ∩ horG (w1 ), we have that N2 ∪ N3 ⊆ S ∩ horG (w1 )
where N3 is the neighborhood of w3 . As a result, we cannot make any assumptions
about the degree of w1 in comparison to the degree of w2 , but we can assume that
degH (w2 ) ≤ degH (w3 ). The other main difference when adding three vertices instead
of two is that it is possible to have the edge w2 w3 . Hence once N1 , N2 , and N3 have
been determined, we must check the eccentricities of H twice: once with the edge
w2 w3 and once without.

2.2.5

Complexity

Algorithm 1 is efficient in practice, but has exponential running time in the worst
case, which leads to the following question:
Question 2.2.2. What is the computational complexity of computing the centralizing
number of a graph?
Computing whether or not a graph is self-centered is in P by using the Floyd-Warshall
algorithm. Computing that a graph G has centralizing number at most t is an N P
problem because we can verify a graph H is a centralizer for G in polynomial time
by using the Floyd-Warshall algorithm.

20

2.3
2.3.1

Computational results
Centralizing number of small graphs

We implemented the algorithm of Section 2.2 in C++, and the code is available
online.1 We used geng from McKay’s nauty package [70] to generate every connected
graph (up to isomorphism) on at most twelve vertices, which was then piped to our
program to compute the centralizing number. For graphs with eleven and twelve
vertices, we performed the computations in parallel on the Open Science Grid [74].
The total computation time for each number of vertices is listed in Table 2.2.
The total number of connected graphs with each centralizing number for each n
are listed in Table 2.1, and lists for all graphs with centralizing number three or four
with at most twelve vertices are posted online.2 Note that the smallest graph with
centralizing number four has six vertices. The graph is a tree whose leaves are not
equidistant from its center, so by Theorem 2.1.2 this graph has centralizing number
four. The smallest graphs with centralizing number three are shown in Figure 2.2. The
graph in Figure 2.2a was previously discovered by Bielak [11] and Liu and He [67].
Also note that the percentage of self-centered graphs increases with n, while the
percentage of graphs with each nonzero centralizing number decreases for large enough
n. We will discuss the growth rate of the number of graphs with each centralizing
number in Section 2.6.

2.3.2

Radius and diameter of centralizers

Examining small graphs and their centralizers suggests comparing the radius and diameter of a centralizer to the radius and diameter of the original graph. Hedetniemi’s
1
2

http://www.math.unl.edu/~s-sbehren7/main/Data.html
http://www.math.unl.edu/~s-sbehren7/main/Data.html

21

n
1
2
3
4
5
6
7
8
9
10
11
12

A(G)=0
1
1
1
2
5
28
223
3,151
79,673
3,853,870
357,767,742
63,104,972,067

A(G)=2
100.0%
100.0%
50.0%
33.3%
23.8%
25.0%
26.1%
28.3%
30.5%
32.9%
35.5%
38.5%

1
4
16
83
611
7,655
174,925
7,656,973
637,989,564
99,950,290,463

A(G)=3

50.0%
66.7%
76.2%
74.1%
71.6%
68.9%
67.0%
65.4%
63.4%
60.9%

5
127
3,988
163,049
9,924,086
967,896,377

A(G)=4

1
14
184
2,492
42,679
1,019,173
36,671,569

0.6%
1.1%
1.5%
1.4%
1.0%
0.6%

0.9%
1.6%
1.7%
1.0%
0.4%
0.1%
0.02%

Table 2.1: A(G) distributions for fixed n. The first number is the total number of
connected graphs on n vertices with A(G) = t while the second number is a percentage
out of all connected graphs on n vertices.

(a)

(b)

(d)

(c)

(e)

Figure 2.2: The smallest graphs with centralizing number three.

n
7
8
9
10
11
12

time

2m
3h 17m
13d 9h 36m
10y 6d 23h 34m

0s
3s
10s
42s
57s
05s

Table 2.2: The total computation time for fixed n.

22
construction shows that for any graph G with centralizing number four, there exists
a centralizer H with rad(H) = 2 and diam(H) = 4. What bounds can be obtained
on the radius of the centralizer of a graph with centralizing number two or three? If
useful bounds could be obtained, we may be able to increase the computation speed
of Algorithm 1.
We begin with some trivial bounds on the radius and diameter of centralizers.
Proposition 2.3.1. Let G be a graph with centralizer H. If A(G) = 2, then 2 ≤
rad(H) ≤ rad(G) + 1 and 3 ≤ diam(H) ≤ rad(G) + 2. If A(G) = 3, then 3 ≤
rad(H) ≤ rad(G) + 1 and 4 ≤ diam(H) ≤ rad(G) + 2. The upper bounds in each case
are sharp.
Proof. Suppose G is a graph with centralizing number two and centralizer H. We
use the bounds on p from Lemma 2.1.3 to obtain bounds on the radius and diameter
of H. Since 1 ≤ p ≤ rad(G) with diam(H) = p + 2 and rad(H) = p + 1, we conclude
that 2 ≤ rad(H) ≤ rad(G) + 1 and 3 ≤ diam(H) ≤ rad(G) + 2. One sharpness
example for the upper bounds is a graph G that is a star with central vertex x. Stars
have a radius of one and diameter of two. A centralizer for G is the graph H where
V (H) = V (G) ∪ {w1 , w2 } and E(H) = E(G) ∪ {w1 , x} ∪ {w2 , v : v ∈ V (G) \ {x}}.
Then H has a radius of two and a diameter of three.
Similarly, suppose G is a graph with centralizing number three and centralizer H.
We use the bounds on p from Lemmas 2.1.3 and 2.1.4 to obtain bounds on the radius
and diameter of H. Since 2 ≤ p ≤ rad(G) with diam(H) = p + 2 and rad(H) = p + 1,
we conclude that 3 ≤ rad(H) ≤ rad(G) + 1 and 4 ≤ diam(H) ≤ rad(G) + 2. A
sharpness example for the upper bounds is the centralizer H pictured in Figure 2.3
for the graph G induced by the solid vertices. The graph G has radius three while H
has radius four and diameter five.

23

Figure 2.3: An example showing the upper bound of Proposition 2.3.1 for A(G) = 3
is sharp.
Our lack of a sharpness example for the lower bounds from Proposition 2.3.1 leads
us to conjecture the lower bounds may be increased. In order to determine how much
we could increase the lower bounds, we searched for any graph G with a centralizer
H where rad(H) < rad(G). Below are two examples of families of graphs Gt with a
centralizer Ht where rad(Ht ) = rad(Gt ) − 1.
Proposition 2.3.2. For t ≥ 2, let C be a cycle on 2t + 4 vertices with x and y a
diametral pair, and let P be a path with t vertices whose endpoints are y and z. Let
Gt be the graph formed by C and P , where y is the only common vertex of C and
P . Let Ht be the graph containing Gt as a subgraph as well as vertices w1 and w2
with w1 adjacent to x and z and w2 adjacent to the four vertices of C that are a
distance of one or two from y. Then Ht is a centralizer of Gt with rad(Gt ) = t + 2
and rad(Ht ) = t + 1.
Proof. First observe that every vertex of C has eccentricity at least t + 2 in Gt in
order to reach all vertices of C and every vertex of P has eccentricity at least t + 2 in
Gt since any shortest path to x must use a x, y-path. In particular, dGt (y, z) = t − 1
and every vertex of Gt lies on a shortest x, y-path or y, z-path. Hence eGt (y) = t + 2
and dG (x, z) = 2t − 1, so rad(Gt ) = t + 2 and Gt is not self-centered.
Hence in order to show A(Gt ) = 2, it is left to show that C(Ht ) = Gt . Note that
dHt (w1 , w2 ) = t + 2, so we need to show every vertex of Gt has eccentricity t + 1 in

24
Ht . Let C 1 be the cycle in Ht using a x, y-path in C, P , and w1 , and let C 2 be the
cycle using the other x, y-path of C, P and w1 . Thus C 1 and C 2 are cycles on 2t + 3
vertices. Let v ∈ V (Gt ). Then for any u ∈ V (Ht ), the pair u and v either lie in C, C 1 ,
or C 2 . If u and v are in C 1 or C 2 , then dHt (u, v) ≤ t + 1. In particular, there exists
a vertex in C 1 or C 2 whose distance in Ht from u is t + 1. If u and v are in C then
either dC (u, v) ≤ t + 1 or u and v are a diametral pair in C. If dC (u, v) = t + 2, then
there exists a shorter path in Ht by using w2 . Using the previous statements, we may
conclude that at least one of the four neighbors of w2 is a distance of at most t from
u in Ht . Therefore, for any u ∈ V (Gt ),

Ht (u)

= t + 1.

A computer search has revealed that G = G1 in the previous example, a graph
with 9 vertices, is the smallest graph with a centralizer H and rad(H) < rad(G).
Proposition 2.3.3. For t ≥ 1, let Gt be the graph formed by a disjoint union of a
cycle on 4t + 6 vertices with diametral pair x and y, and two paths with t vertices.
Additionally, include the edges from x to an endpoint of one path and y to an endpoint
of the other path. Let Ht be the graph containing Gt as a subgraph and the vertices
w1 whose neighbors are the two pendants of Gt and w2 whose neighbors are the four
vertices of the cycle that are a distance t + 1 from x or y. Then rad(Gt ) = 2t + 3 and
rad(Ht ) = 2t + 2.
We omit the proof of Proposition 2.3.3 because it is similar to the proof of Proposition 2.3.2.
The previous results lead us to conjecture the following.
Conjecture 2.3.4. Suppose G is a graph with centralizing number two and rad(G) ≥
4. If H is a centralizer of G, then rad(H) ≥ rad(G) − 1.

25
Thus if Conjecture 2.3.4 is true, the families of graphs from Propositions 2.3.2
and 2.3.3 show it is also sharp. Observe that Conjecture 2.3.4 is equivalent to
diam(H) ≥ rad(G) since diam(H) = rad(H) + 1.
We modified Algorithm 1 to check the radius of every centralizer for each graph
with centralizing number two and at most ten vertices. This computer search showed
that Conjecture 2.3.4 holds for all graphs with at most ten vertices.
In order to provide support for Conjecture 2.3.4, we examine properties of a centralizer H for a graph G when rad(H) < rad(G). In particular, we consider the role
of the peripheral vertices in a graph’s centralizer. Given a graph G with centralizer
H, we define a vertex w ∈ P (H) to be used for transportation if there exists a vertex
v ∈ V (G) with u ∈ horG (v) such that

H (v)

<

G (v)

and a shortest u, v-path in

H uses w. If G is a graph with centralizing number two and H a centralizer, then
most centralizers have one peripheral vertex that is used for transportation while the
other peripheral vertex keeps the first peripheral vertex out of the center. However,
if rad(H) < rad(G), this cannot be the case.
Proposition 2.3.5. Let G be a graph with A(G) = 2 and centralizer H. If rad(H) <
rad(G), then both vertices in P (H) are used for transportation.
Proof. Let w1 and w2 be the peripheral vertices of H, and define
T1 = {(u, v)|u, v ∈ V (G),

H (u)

<

G (u)

= dG (u, v), and w1 lies on a shortest u, v-path} and

T2 = {(u, v)|u, v ∈ V (G),

H (u)

<

G (u)

= dG (u, v), and w2 lies on a shortest u, v-path}.

Hence T1 is the set of vertices in G using w1 for transportation and T2 is the set of
vertices using w2 for transportation.
If w2 is never used for transportation, then T2 = ∅. Since rad(H) < rad(G), this
implies that for every v ∈ V (G), there exists some u ∈ V (G) so that (u, v) ∈ T1 . Let
v ∈ V (G) be a vertex in the neighborhood of w2 , so

H (v)

= rad(H). Then (u, v) ∈ T1

26
for some u, so there is a u, v-path P containing w1 of length at most rad(H). Hence
dH (v, w1 ) < rad(H) and thus dH (w1 , w2 ) ≤ rad(H), a contradiction.
By Proposition 2.3.1, for any graph with radius two and centralizing number two,
the radius of any centralizer for the graph is either two or three. However, if G is a
graph with A(G) = 2, rad(G) = 3, and a centralizer H, then we have 2 ≤ rad(H) ≤ 4.
Hence the conclusion of Conjecture 2.3.4 holds for graphs with radius at most three.
We conjecture that the lower bound can be further increased for graphs with radius
three.
Conjecture 2.3.6. Suppose G is a graph with centralizing number two and rad(G) =
3. If H is a centralizer of G, then rad(H) ≥ rad(G).
In particular, if there is a counterexample to Conjecture 2.3.6, then it is a graph
with diameter exactly four.
Proposition 2.3.7. Let G be a graph with centralizing number two and rad(G) = 3.
If there exists a centralizer H of G with rad(H) = 2, then diam(G) = 4.
Proof. Since A(G) = 2, we have diam(G) > rad(G). Suppose such an H exists
with peripheral vertices w1 and w2 . Suppose u, v ∈ V (G) with dG (u, v) ≥ 3. Since
dH (u, v) = 2, either u, v ∈ NH (w1 ) or u, v ∈ NH (w2 ). Assume for the sake of
contradiction that diam(G) ≥ 5. Then there exist x, y ∈ V (G) with dG (x, y) ≥ 5.
Without loss of generality, x, y ∈ NH (w1 ). For any v ∈ V (G), either dG (x, v) ≥ 3 or
dG (y, v) ≥ 3, and thus v ∈ NH (w1 ). In particular, NH (w1 ) = V (G), which contradicts
Lemma 2.1.3.
We also conjecture the lower bounds of Proposition 2.3.1 can be increased for
graphs with centralizing number three.

27
Conjecture 2.3.8. Suppose G is a graph with centralizing number three and
rad(G) ≥ 4. If H is a centralizer of G, then rad(H) ≥ rad(G).
From our computer search, the conjecture holds for all graphs with at most eleven
vertices. By Proposition 2.3.1, if G is a graph with A(G) = 3 and radius two or three,
then any centralizer H of G has rad(H) ≥ 3. Hence the conclusion of Conjecture 2.3.8
holds when rad(G) ≤ 3.

2.4

Effect of cloning and twinning vertices on
A(G)

As stated in the introduction, there are examples of infinite families of graphs with
each possible centralizing number. We introduce a method of constructing new graphs
from some base graph, and then focus to the specific cases of cloning and twinning
vertices. We use twinning and cloning vertices to create a new infinite family of graphs
with centralizing number three and a new infinite family with centralizing number
four. First, we introduce a sufficient condition for graphs to have centralizing number
at most two.
Definition 2.4.1. A clique is a pairwise adjacent set of vertices. A clique K in a
graph is a dominating clique if every vertex not in K is adjacent to at least one vertex
in K. Note that a dominating clique is not necessarily a maximal clique.
Proposition 2.4.2. Let G be a graph that is not complete and that contains a dominating clique. Then A(G) ≤ 2. If G has diameter 3, then A(G) = 2.
Proof. Let S be the vertices in the dominating clique that are adjacent to at least one
vertex not in the clique. Construct H from G by adding vertex w1 whose neighborhood

28
is S and adding vertex w2 with neighborhood V (G) \ S. Then for v ∈ S,

H (v)

=2

since v is adjacent to w1 , v can reach any vertex of V (G) \ S via some vertex of S, and
can reach w2 via a neighbor in V (G) \ S. For any v ∈ V (G) \ S,

H (v)

= 2 because v is

adjacent to w2 , v may reach any vertex of V (G) \ S via w2 , and can use a neighbor in
S to reach w1 or any other vertex of S. Vertices w1 and w2 are in the periphery since
every w1 , w2 -path has length at least three. Thus C(H) = G. Therefore A(G) ≤ 2.
Since G has a dominating clique, the diameter of G is at most three. If the
diameter of G is exactly three, then G has some vertex with eccentricity 3 in G.
However any vertex of K has an eccentricity in G of at most two, so G is not selfcentered. Thus A(G) = 2.
Corollary 2.4.3. If G has a dominating vertex and is not complete, then A(G) = 2.
Proof. If G has a dominating vertex d, then we apply Proposition 2.4.2 with K = {d}.
Since G is not complete, there exists some vertex with eccentricity two, but

G (d)

= 1.

Hence G is not self-centered, so A(G) = 2.
Now we introduce the graph operation G ⊕u,S J, which generalizes a construction
of Klavˇzar, Narayankar, and Walikar [55]. We use Corollary 2.4.3 to prove special
cases about centralizing numbers of graphs G ⊕u,S J.
Definition 2.4.4. Let G and J be graphs, with u ∈ V (G) and S ⊆ V (J) (S may be
empty). Define G ⊕u,S J to be the graph obtained from the disjoint union of G and
J by joining each vertex of J to all vertices in the open neighborhood of u in G, and
joining each vertex of S to u.
The next lemma shows that the operation G ⊕u,S J essentially preserves distances
from G.

29
Lemma 2.4.5. Given a graph G with at least two vertices and a graph J with u ∈
V (G) and S ∈ V (J), let G = G ⊕u,S J. Then for any v ∈ V (J), x ∈ V (G) \ {u},
and y ∈ V (G), we have dG (x, y) = dG (x, y) and dG (v, x) = dG (u, x). Hence
G

(y). Furthermore, if u does not dominate G then

dominating vertex of G, if S = V (J) then
also a dominating vertex of J, then

G

G

G

(u) =

(u) = 1, else

(v) = 1, else

G

G

G

G (y)

=

(v). When u is a

(u) = 2. If v ∈ S is

(v) = 2 for any v ∈ V (J).

Proof. Let P be a shortest x, y-path in G . If P does not have any vertices in J then
dG (x, y) = dG (x, y). If P contains a vertex of J, then we may swap that vertex for
u to create a path in G, and since P was a shortest path then dG (x, y) = dG (x, y).
Hence

G

(u) =

G (u)

since (in G ) u tis adjacent to every vertex of J.

Let Q be a shortest x, v-path in G . Then v must be the only vertex of J in Q
and the vertex next to v in Q must be a neighbor of u. Thus dG (x, v) = dG (x, u).
Hence

G

(x) =

G (x).

This leaves the eccentricities in G of vertices of J. The distance in G between any
two vertices of V (J) ∪ {u} is at most two. If u is not dominating in G, then
and no vertex of J can dominate G , so

G

(u) =

G

G (u)

>1

(v). Suppose u dominates G.

If S = V (J), then u is adjacent to every vertex of G , so

G

there exists some vertex v of G that is nonadjacent to u, so

(u) = 1. Otherwise
G

(u) = 2. If some

v ∈ S is also dominating in J, then it is adjacent to every vertex of G , so

G

(v) = 1.

Otherwise for any v ∈ V (J) there exists a vertex of J ∪ {u} that is not adjacent to
v, so

G

(v) = 2.

Theorem 2.4.6. Given a connected graph G and a graph J, let u ∈ V (G) be a
non-dominating vertex of J, let S ⊆ V (J), and let G = G ⊕u,S J. If A(G) = 0 or
A(G) = 2, then A(G ) = A(G). If A(G) = 3 or A(G) = 4, then 2 ≤ A(G ) ≤ A(G).

30
If u dominates G and S = V (G) then either both G and J are complete and
A(G ) = 0, or A(G ) = 2.
If u dominates G and S = V (J), then one of the following occurs:
1. If G = Kn for n ≥ 2, then A(G) = 0 and A(G ) = 2.
2. If u is the only dominating vertex of G and some v ∈ S dominates J, then
A(G ) = A(G) = 2.
3. If u is the only dominating vertex of G and no v ∈ S dominates J, then A(G) =
2 and A(G ) = 0.
4. Otherwise A(G) = A(G ) = 2.
Proof. Let H be a centralizer of G and let H = H ⊕u,S J. First suppose u does not
dominate G. In order to show A(G ) ≤ A(G), it is enough to show that C(H ) = G
since H has A(G) more vertices than G . By Lemma 2.1.3, H does not have a
dominating vertex. Thus

G

(y) =

G (y)

for all y ∈ V (G) and

G

(u) =

G

(v) for all

v ∈ V (J) by Lemma 2.4.5. Hence all vertices in G have equal eccentricities in H and
any vertices in V (H ) \ V (G ) have higher eccentricities in H . Therefore C(H ) = G .
Suppose for the sake of contradiction that A(G) ≥ 2, but A(G ) = 0. Then there
exists at least one vertex of G whose eccentricities in G and G are different, which
contradicts Lemma 2.4.5. Thus A(G) ≥ 2 implies that A(G ) ≥ 2.
Now suppose u is a dominating vertex of G with S = V (J). Then u also dominates
G . If both G and J are complete, then G is also complete, so A(G) = A(G ) = 0. If
either G or J is not complete then G also has a non-dominating vertex, so A(G ) = 2
by Corollary 2.4.3.
Finally suppose u is a dominating vertex of G with S = V (J). Then u is not a
dominating vertex of G . If every vertex of G is dominating, then G = Kn , so G is self-

31
centered. Any vertex of G \ {u} is dominating in G , so A(G ) = 2 by Corollary 2.4.3.
If u is the only vertex of G that dominates G, then by Corollary 2.4.3 we know
that A(G) = 2. Furthermore, any vertex of G \ {u} has eccentricity two in both G
and G . Additionally,

G

(u) = 2 and any vertex of J has eccentricity at most two

in G . If there exists some v ∈ S that dominates J, then v is also dominating in
G , so A(G ) = 2 be Corollary 2.4.3. Otherwise every vertex of G has eccentricity
two, so G is self-centered. Otherwise G must have at least one other dominating
vertex x = u, but G is not the complete graph. Then Lemma 2.4.5 tells us that
x is also a dominating vertex of G , so applying Corollary 2.4.3 we conclude that
A(G) = A(G ) = 2.
The case of Theorem 2.4.6 where A(G) = 2 and S = V (J) was proved by Klavˇzar,
Narayankar, and Walikar [55]. Next we define cloning and twinning vertices, and
show how the centralizing number of a graph changes after cloning or twinning a
single vertex.
Definition 2.4.7. Given a graph G and a vertex v, the result of cloning v is a graph
G formed by adding a vertex v whose neighborhood is NG (v). We say that v is a
clone of v in G . The result of twinning v is a graph G formed by adding a vertex
v whose neighborhood is NG (v) ∪ {v}. We say that v is a twin of v in G .
Note that in the case where J is a single vertex v, if S = {v} then G ⊕u,S J is the
graph formed from G by twinning u, and otherwise G ⊕u,S J is the graph formed from
G by cloning u. Hence we have the following immediate corollaries of Lemma 2.4.5
and Theorem 2.4.6.
Corollary 2.4.8. Given a graph G with at least two vertices, let G be any graph
formed by cloning or twinning any vertex v of G. Let v be the clone or twin of v.

32
Then for any vertex x ∈ V (G ) \ {v, v } and y ∈ V (G ) \ {v }, dG (x, y) = dG (x, y) and
dG (x, v ) = dG (x, v). Hence

G

vertex that dominates G, then

(x) =
G

G (x)

(v) = 2 =

and
G (v)

G

(v) =

G

(v ). If v is a clone of a

+ 1. Otherwise,

G

(v) =

G (v).

Corollary 2.4.9. Given a graph G, let G be any graph formed by twinning any vertex
of G or cloning any non-dominating vertex of G. If A(G) = 0 or A(G) = 2, then
A(G ) = A(G). If A(G) = 3 or A(G) = 4, then 2 ≤ A(G ) ≤ A(G).
If G is a graph formed from G by cloning a dominating vertex v, then one of the
following occurs:
1. If G = Kn , then A(G) = 0 and A(G ) = 2.
2. If v is the only dominating vertex of G, then A(G) = 2 and A(G ) = 0.
3. Otherwise A(G) = A(G ) = 2.
Corollary 2.4.9 raises the question of whether twinning or cloning preserves the
centralizing number. However, there exist graphs where cloning or twinning a vertex
decreases the centralizing number. An example is shown in Figure 2.4. In Figure 2.4a,
we provide the centralizer for the graph induced by the solid vertices, which has
centralizing number three. When we clone vertex v, the resulting graph G has
centralizing number two, as shown in Figure 2.4b. Similarly, the graphs in Figures 2.5a
and 2.5c have centralizing number four, while the cloning of vertex v results in a graph
whose centralizing number is two (Figure 2.5b) and three (Figure 2.5d).
We checked graphs with at most eleven vertices and found examples where twinning a vertex causes a graph with centralizing number three to have centralizing
number two, as shown in Figure 2.6. However, we did not find any graphs where
twinning a vertex in a graph with centralizing number four resulted in a graph with
lower centralizing number.

33

v

v

(a)

v

(b)

Figure 2.4: An example where cloning a vertex causes the centralizing number to
decrease from three to two.
Question 2.4.10. Can twinning a vertex in a graph with centralizing number four
decrease the centralizing number?

v

v
v

(a)

(b)

v
v

(c)

v

(d)

Figure 2.5: The graphs shown in (a) and (c) have centralizing number four. When
cloning vertex v of (a), the resulting graph has centralizing number two. A centralizer
is shown in (b). Similarly, cloning vertex v of (c) results with a graph with centralizing
number three, and a centralizer is shown in (d).
Although cloning or twining a vertex may decrease the centralizing number, if a
vertex has been cloned or twinned sufficiently many times then additional cloning or
twinning will not cause the centralizing number to decrease.
Proposition 2.4.11. Given a graph G, let G be the graph formed by of cloning vertex
v at least once. Let G be the graph formed by cloning v once more. If A(G ) ≥ 3,
then 3 ≤ A(G ) ≤ A(G ). The same result holds if twinning is used instead of cloning.

34

v
v
v

(a)

(b)

Figure 2.6: The graph in (a) is the centralizer for the subgraph induced by the solid
vertices. The graph formed by twinning vertex v has lower centralizing number, as
shown in (b).
Proof. By Corollary 2.4.9 2 ≤ A(G ) ≤ A(G ). Let S = (V (G ) \ V (G)) ∪ {v},
so |S| ≥ 3. Suppose to the contrary that A(G ) = 2 and let H be a centralizer
of G with P (H) = {w1 , w2 }. Then by Lemma 2.1.3, w1 and w2 cannot have any
common neighbors. Hence each vertex of S is adjacent to either w1 , w2 , or neither.
Suppose some s ∈ S is not adjacent to w1 nor w2 . Let H be the induced subgraph
of H on V (H) \ {s}. Since A(G) = 3, Corollary 2.4.3 implies that G does not
have a dominating vertex. Hence G also does not have a dominating vertex. Thus
Corollary 2.4.8 implies that

H (u)

=

H

(u) for all u ∈ V (H ), so H is a centralizer

for G with P (H) = 2, a contradiction.
Hence any s ∈ S must be adjacent to w1 or w2 . By the pigeonhole principle,
we have at least two vertices in S adjacent to the same peripheral vertex. Let t
be one of those vertices. Hence the induced subgraph H of H on V (H) \ {t} has
H (u)

=

H

(u) for all u ∈ V (H ) by Corollary 2.4.8. Therefore H is a centralizer

for G with |P (H )| = 2, a contradiction.
Proposition 2.4.12. Given a graph G, let G be the graph formed by a sequence of
cloning a vertex v at least three times. Let G be the graph formed by cloning v once
more. If A(G ) = 4, then A(G ) = 4. The same result holds if twinning is used

35
instead of cloning.
Proof. By Proposition 2.4.11, 3 ≤ A(G ) ≤ 4. Let S = (V (G ) \ V (G)) ∪ {v},
so |S| ≥ 5. Suppose to the contrary that A(G ) = 3 and let H be a centralizer
of G with P (H) = {w1 , w2 , w3 }. Then by Lemma 2.1.3, w1 and w2 cannot have
any common neighbors, and w1 and w3 cannot have any common neighbors. Hence
each vertex of S must be adjacent to either w1 , w2 , w3 , both w2 and w3 , or none of
w1 , w2 , w3 . Suppose some s ∈ S is not adjacent to no vertex of P (H). Let H be the
induced subgraph of H on V (H) \ {s}. Since A(G) = 4, Corollary 2.4.3 implies that
G does not have a dominating vertex. Hence G also does not have a dominating
vertex. Thus Corollary 2.4.8 implies that

H (u)

=

H

(u) for all u ∈ V (H ), so H is

a centralizer for G with P (H) = 3, a contradiction.
Hence any s ∈ S must be adjacent to w1 , w2 , w3 , or both w2 and w3 . By the
pigeonhole principle, we have at least two vertices in S with the same set of neighbors
in P (H). Let t be one of those vertices. Hence the induced subgraph H of H on
V (H) \ {t} has

H (u)

=

H

(u) for all u ∈ V (H ) by Corollary 2.4.8. Therefore H

is a centralizer for G with |P (H )| = 3, a contradiction.
As mentioned in the introduction, it has been previously shown that there are
infinitely many graphs with centralizing number three and infinitely many with centralizing number four (see [11, 67, 87, 63]). Propositions 2.4.11 and 2.4.12 give us
another way to generate infinitely many graphs with centralizing number three or
four.
Proposition 2.4.13. An infinite family of graphs with centralizing number four can
be formed by cloning vertices.
Proof. The graph in Figure 2.7a is a centralizer for the subgraph G1 induced by the
solid vertices. Since u is a clone of v in G1 and has centralizing number three, itera-

36
tively applying Proposition 2.4.11 yields an infinite family of graphs with centralizing
number three.
Proposition 2.4.14. An infinite family of graphs with centralizing number four can
be formed by cloning vertices.
Proof. The graph G2 in Figure 2.7b is a graph with centralizing number 4. Observe
that G2 can be formed from the graph without vertices s,t, and u by twinning vertex v
three times. Hence, continuing to twin vertex v we iteratively apply Proposition 2.4.12
to obtain an infinite family of graphs with centralizing number four.

u

v

(a)

s

t

u

v

(b)

Figure 2.7: These graphs can be used to generate an infinite family of graphs with
centralizing number three or four.
We conclude this section with another specific case of centralizing numbers with
respect to twinned vertices.
Proposition 2.4.15. Let G be a graph with a pendant vertex v, and let G be the
graph where v has been twinned. If A(G) ≤ 3, then A(G) = A(G ). If A(G) = 4, then
A(G ) ≥ 3.
Proof. By Corollary 2.4.9, if A(G) ≥ 3, then A(G ) ≥ 2. Hence it is left to show that
if A(G) ≥ 3, then A(G ) ≥ 3. So suppose A(G ) = 2 with H a centralizer, and let
u be the neighbor of v. By Lemma 2.1.3(4a), each of v and v are adjacent to some
vertex of P (H) = {w1 , w2 }. As argued in the proof of Proposition 2.4.11, without

37
loss of generality, v is adjacent to w1 and v is adjacent to w2 . Since v is adjacent
to v , we conclude that dH (w1 , w2 ) = 3, so

H (w1 )

=

H (w2 )

= 3 and

H (y)

= 2 for

y ∈
/ P (H). Since A(G) > 2, G cannot have a dominating vertex (Corollary 2.4.3).
In particular, there exists some x ∈ V (G) where xu ∈
/ E(G). Hence xu ∈
/ E(H). As
H (v)

=

H (v

2.5

) = 2, then xw1 , xw2 ∈ E(H), which contradicts dH (w1 , w2 ) = 3.

Centralizing number of dense graphs

Theorem 2.1.2 [18] states that the sparsest connected graphs for a fixed number of
vertices (trees) have either centralizing number two or four. We examine the opposite
end of the spectrum and classify centralizing numbers of very dense graphs.
The following theorem is similar to a theorem of Buckley [15]. However, Buckley’s
focus was on self-centered graphs while we consider graphs that also have centralizing
number two.
Theorem 2.5.1. Let Gn be the collection of all graphs on n vertices with at least
n
2

−

n
2

edges. Then there are exactly two graphs in Gn that are self-centered. The

remaining graphs of Gn have centralizing number two.
Proof. Suppose G is a graph with exactly
has

n
2

n
2

−

n
2

edges, so the complement of G

edges. Recall that Corollary 2.4.3 states that any graph that is not complete

and contains a dominating vertex has centralizing number two. Note that G has a
dominating vertex if and only if the complement of G has an isolated vertex. The only
way to avoid an isolated vertex in the complement is if the complement is a matching
(for n even) or a matching plus an edge (for odd n). In this case, the eccentricity of
every vertex in G is two, so G is self-centered.

38
The complete graph Kn is self-centered, so let G be a graph G = Kn whose
complement has at at least one edge and at most

n−1
2

edges. This means there is

at least one isolated vertex in the complement, so G has a dominating vertex. Then
A(G) = 2 by Corollary 2.4.3.
Thus, with the exception of the complete graph, the densest self-centered graph
has

n
2

−

n
2

edges, and any graph with more edges that is not the complete graph

has centralizing number two. This leads us to ask what are the densest graphs with
centralizing number three and four.
Definition 2.5.2. For n ≥ 6, let G4 (n) consist of a clique on n − 5 vertices, and
three vertices that are adjacent to every vertex of the clique, two of which also have
a pendant neighbor, as shown in Figure 2.8.
Proposition 2.5.3. For n ≥ 6, A(G4 (n)) = 4.
Proof. When n = 6, we have a tree, which by Theorem 2.1.2 has a centralizing
number of four. For n ∈ {7, 8, 9}, we confirm with a computer check that G4 (n) also
has a centralizing number of four. For n > 9, we apply Proposition 2.4.12 to conclude
that G4 (n) has a centralizing number of four because we can construct G4 (n + 1) by
twinning a vertex in the maximum clique of G4 (n).
If we add edge x y to G4 (n), then adding w1 with neighbors z, x , and y and
adding w2 adjacent to the rest of the vertices in G4 (n) yields a centralizer for G4 (n)
with the extra edge. If we add an edge from z to one of x, y, x , or y , then adding w1
with neighbors x and y and adding w2 whose neighbors are the vertices of the Kn−5
yields a centralizer. Notice that by adding any remaining possible edge to G4 (n), we
may apply Proposition 2.4.2. In any case, adding an edge to G4 (n) yields a graph
with centralizing number two.

39
z

x

x

Kn−5

y

y

Figure 2.8: The graph G4 (n). The circle indicates a clique of n − 5 vertices, with x, y,
and z adjacent to each vertex in the clique.
It is worth observing that G4 (6) is the unique graph on 6 or fewer vertices with
a centralizing number greater than two. A computer search has shown that G4 (n) is
the unique graph with the largest number of edges and centralizing number greater
than two for n ≤ 11.
Conjecture 2.5.4. G4 (n) is the unique graph with the largest number of edges on n
vertices with a centralizing number larger than two.
Since G4 (n) has centralizing number four, Conjecture 2.5.4 implies that G4 (n) is
the densest graph with centralizing number four. The following statements provide
support for Conjecture 2.5.4.
Lemma 2.5.5. All graphs of diameter two have centralizing number at most two.
Proof. If G is a graph with diameter two, then every vertex of G has eccentricity at
most two. If every vertex has eccentricity two, then G is self-centered, so A(G) = 0.
Otherwise there exists a vertex v with

G (v)

= 1, so v is a dominating vertex, and by

Corollary 2.4.3, A(G) = 2.
Lemma 2.5.6. If G is a graph with A(G) > 2, then ∆(G) ≤ n − 3, where ∆(G) is
the maximum degree of G.

40
Proof. Suppose G is a graph with centralizing number greater than two. By Corollary 2.4.3, G cannot have a dominating vertex. Hence ∆(G) ≤ n − 2. If G has
a vertex v of degree n − 2, then there is exactly one vertex u that is not adjacent
to v. As G is a connected graph, there exists some vertex x that is adjacent to u.
Assuming G has at least four vertices, then {v, x} is a dominating clique satisfying
Proposition 2.4.2. If G has less than four vertices, it is easy to check that A(G) ≤ 2.
Hence ∆(G) ≤ n − 3.
Theorem 2.5.7. If G is a graph with A(G) > 2, then G has at most

n
2

− ( 32 n − 2)

edges.
Proof. By Lemma 2.5.5, if A(G) > 2, then G has diameter at least three. Hence
there exists vertices x and y with dG (x, y) = 3. Let S = V (G) \ {x, y}. Then for
any v ∈ S, at least one of xv and yv is in E(G). Additionally, xy ∈ E(G). Since
A(G) > 2, ∆(G) ≤ n − 3 (Lemma 2.5.6). Hence each vertex of S is not adjacent to
at least two vertices of G. In order to satisfy this while maximizing the number of
edges in G, we must have that one of those vertices is x or y and the other vertex is
in S. Hence |E(G)| ≥ (n − 2) + 1 + 21 (n − 2) = 32 n − 2.
In order to provide support for Conjecture 2.5.4, we also construct a necessary
condition for a graph with n vertices to have at least

n
2

− (2n − 2) edges and

centralizing number at least two.
Recall from Proposition 2.4.2 that if a graph contains a dominating clique then
the graph has centralizing number at most two.
Definition 2.5.8. If a vertex v is not adjacent to any vertex of some clique, then v
prevents the clique from being dominating and so we say that v is a blocking vertex
for the clique. Let β(C) be the number of blocking vertices for a clique C.

41
Similarly, we say v is an almost blocking vertex for some clique if v is adjacent to
exactly one vertex of the clique.
Hence if a graph G has centralizing number greater than two, every clique in G has
at least one blocking vertex, so β(C) ≥ 1 for any clique C of G.
Proposition 2.5.9. Let G be a graph with n ≥ 20 vertices, at least

n
2

− (2n − 2)

edges, and A(G) > 2. Let C be a maximal clique in G where β(C) is minimized.
Then C has only one blocking vertex, so β(C) = 1.
Proof. Let β = β(C), let γ = |C|, and let B be the set of blocking vertices for C. Let
P = V (G) \ (B ∪ C) with ρ = |P |, so C, B, and P partition V (G). In other words,
P is the pool of vertices that are not in C nor B. Additionally, let A be the set of
almost blocking vertices, and note A ⊆ P .
First we use Tur´an’s theorem [82] to determine a bound on γ. By Tur´an’s The2

orem, if G is Kr+1 -free then G has at most (1 − 1r ) n2 edges. Setting r =
2

(1 − 1r ) n2 <

n
2

− (2n − 2). Hence G has a clique with at least

G has an independent set with at least

n
5

n
5

n
5

yields

+ 1 vertices, i.e.

+ 1 vertices. We conclude γ ≥ 5 since

n ≥ 20.
Consider G, the complement of G. In G, C is an independent set, a blocking
vertex of C is adjacent to every vertex of C, and an almost blocking vertex of C is
adjacent to every vertex of C except one. Hence a dominating clique in G corresponds
to an independent set in G where every vertex in G is nonadjacent to some vertex
in the independent set. Additionally, since G is a graph with n vertices and at least
n
2

− (2n − 2) edges, then G is a graph with n vertices and at most 2n − 2 edges.

Unless otherwise stated, assume all adjacency relations in the remainder of this proof
are in G.

42
Notice that every vertex of P is adjacent to at least one vertex of C, else we would
contradict the maximality of C. Suppose a vertex p0 in P is adjacent to exactly one
vertex c0 of C and is nonadjacent to at least one vertex of B. Then (C ∪ {p0 }) \ {c0 }
is an independent set with γ vertices. Since β was minimized, then for every vertex
of B that is not adjacent to p0 there exists some vertex x in P that is adjacent to p0
and every vertex of C \ {c0 }. Hence x is an almost blocking vertex.
Every almost blocking vertex has γ − 1 ≥ 4 edges to C. Any vertex of P \ A either
has at least two edges to B ∪ C or has one edge to C and one edge to an almost
blocking vertex. Every vertex of B is adjacent to every vertex of C. Hence we have
accounted for at least 2ρ + γβ = 2n − 2γ − 2β + γβ edges in G. Thus

2n − 2γ − 2β + γβ ≤ 2n − 2,

which simplifies to
(β − 2)(γ − 2) ≤ 2.
Since γ ≥ 5 we have that β ≤ 2.
Assume for the sake of contradiction that β = 2, and let B = {b1 , b2 }. Then every
vertex of P is adjacent to at least one vertex of C, and every vertex of B is adjacent
to every vertex of C. Hence we have accounted for ρ + 2γ edges, and the number of
remaining edges in G is at most

(2n − 2) − (ρ + 2γ) = n − γ = ρ + 2.

(2.5.1)

We next consider the following cases, one of which must occur.
Case 1: Some vertex p0 of P is adjacent to exactly one vertex of C and is nonadjacent to at least one vertex of B. In this case, there are more edges that we can

43
account for. As described above, p0 must be adjacent to an almost blocking vertex.
Each almost blocking vertex in P is adjacent to all but one vertex of C, so we have
an additional γ − 2 ≥ 3 edges. Each vertex p0 of P that is adjacent to exactly one
vertex of C and is nonadjacent to at least one vertex of B must be adjacent to at
least two vertices of A ∪ B, and each remaining vertex of P is adjacent to at least one
more vertex of B ∪ C. Hence we have accounted for at least ρ + 3 more edges, which
is larger than the value from Equation 2.5.1, and hence is too many.
Case 2: Every vertex of P is adjacent to at least two vertices in C or is adjacent
to both b1 and b2 as well as a vertex of C. In this case, each vertex of P has at least
one more edge leaving P than in the previous total. Since there were ρ + 2 edges left
after Equation 2.5.1, at most two vertices of P can be adjacent to a third vertex in
B ∪ C. In particular, at most two vertices of P can be adjacent to both b1 and b2 .
Hence we will break this case into three subcases based on the number of vertices in
P that are adjacent to both b1 and b2 .
First observe that there cannot exist p0 ∈ P nonadjacent to B ∪ P \ {p0 }. If such
a p0 exists, then p0 has some non-neighbor c0 ∈ C. Then {p0 , c0 } form a dominating
clique in G.
Subcase 1: Exactly two vertices of P are adjacent to both b1 and b2 . Let p1 and p2
be the two vertices of P that are adjacent to both b1 and b2 . If there exists a third
vertex p3 ∈ P , p3 is nonadjacent to b1 nor b2 and there exists some vertex c1 ∈ C that
is also nonadjacent to p3 . Hence {p3 , c1 } is a dominating clique in G. Thus ρ = 2
and we have accounted for exactly the number of edges from Equation 2.5.1. Note b1
and b2 are adjacent to every vertex except for each other, which implies the edge b1 b2
in G is its own component. However, G cannot be disconnected if G has a nonzero
centralizing number.
Subcase 2: Exactly one vertex p1 ∈ P is adjacent to both b1 and b2 . Then by

44
Equation 2.5.1, G can have one more edge e that has not yet been described. Since
every vertex of P must be adjacent to some vertex of B ∪ P , if e is not contained
in B ∪ P then ρ = 1. This implies that the edge b1 b2 is its own component in G,
contradicting that A(G) > 2. If ρ = 1 and the remaining edge e is contained in B ∪P ,
the pair of vertices that we have not declared adjacent are b1 and b2 . Thus e = b1 b2 ,
which makes b1 dominating, contradicting that G is connected. Hence ρ ≥ 2, and e
is used in B ∪ P . If ρ > 2, then since every vertex of P must be adjacent to some
vertex of B ∪ P , we must have P = {p1 , p2 , p3 } with e = p2 p3 . Since γ ≥ 5, there
exists an c1 ∈ C that is not adjacent to p2 nor p3 , thus {p2 , c1 } is a dominating clique
in G. Hence ρ = 2 with P = {p1 , p2 } and p2 has two neighbors c1 and c2 in C.
Since p2 must have a neighbor in B ∪ P , then e must be from p2 to p1 or from p2 to
a vertex in B, say b1 . In the former case γ ≥ 5 implies that there exists some c3 ∈ C
that is not adjacent to p1 nor p2 . Thus p2 , c3 is a dominating clique in G. Hence the
latter case holds. Either NC (p1 )

{c1 , c2 }, say c1 , or p1 has a distinct neighbor c3 in

C. This completely determines G, so we examine the centralizing number of G. G is
the graph in Figure 2.9a or Figure 2.9b, respectively. For either graph in Figure 2.9,
add vertices {w1 , w2 } with N (w1 ) = {p2 } and N (w2 ) = {b1 , c1 }. This yields a graph
with two more vertices than G and whose central subgraph is G. Thus A(G) ≤ 2.
Subcase 3: Every vertex of P is adjacent to at most one of b1 and b2 . Hence we
assume every vertex of P has two neighbors in C. Thus we have accounted for ρ of the
edges in Equation 2.5.1 and hence have at most two edges remaining before counting
edges within B ∪ P . Since every vertex in P has a neighbor in B ∪ P , at least one
edge must be used in B ∪ P that has at least one endpoint in P . Suppose only one
edge is used. If it is contained entirely in P , say p1 p2 , then since γ ≥ 5, there exists
a vertex c0 ∈ C that is not adjacent to p1 nor p2 (and hence p1 , c0 is a dominating
clique in G) unless γ = 5 and p1 has that third edge to a vertex in C and p1 and

45

b1

c1
c2

p1

b1

c3
c2
c1

p1

C
b2

p2

C
b2

(a)

p2
(b)

Figure 2.9: Graphs described in Subcase 2. In both graphs, C is a clique and p2
is adjacent to every vertex of C \ {c1 , c2 }. In (a), p1 is adjacent to every vertex of
C \ {c1 }. In (b), p1 is adjacent to every vertex of C \ {c3 }.
p2 have disjoint neighborhoods in C. In this special case G has been determined,
so we examine G, which is the self-centered graph in Figure 2.10a. Hence the single
edge must be p1 b1 (or p1 b2 ). Once again, the edges of G have been determined, so we
examine G. G is the graph in Figure 2.10b. Add vertices {w1 , w2 } with N (w1 ) = {p1 }
and N (w2 ) = {b1 , c1 , c2 }. This is a centralizer for G, so A(G) = 2.
If one edge is in B, then the other edge must be p1 p2 , else B would contain a
dominating vertex. (Therefore we must use both edges.) Since γ ≥ 5, there exists
some c0 ∈ C that is not adjacent to p1 nor p2 , and c0 , p1 is a dominating clique in G.
Thus both edges have at least one endpoint in P . Hence we have two independent
vertices p1 and p2 in P . Since γ ≥ 5, there exists some c ∈ C that is not adjacent
to p1 nor p2 . The only way p1 , p2 , c is not a dominating clique in G is if, without
loss of generality, b1 is adjacent to both p1 and p2 . Then p1 , p2 , b2 is a dominating
clique in G unless p1 and p2 have a common neighbor in C. As this determines
G, we examine G. In G, if p1 and p2 have the same two neighbors in C, then G
is the graph in Figure 2.10c. Adding vertices {w1 , w2 } with N (w1 ) = {p1 , p2 } and
N (w2 ) = {c1 , c2 , b1 } yields a centralizer for G, so A(G) = 2. Otherwise p1 and p2 have
exactly one common neighbor in C with respect to G. In this case, G is the graph

46

c5
c4
c3 C
c2
c1

p1

b1

p2

b2

c1
c2

b1

C
b2

p1

(a)

b1

(b)

c1
c2

p1

b1

c3
c2
c1

p1

C
b2

p2

C
b2

(c)

p2
(d)

Figure 2.10: Graphs described in Subcase 3. In each graph, C is a clique.
in Figure 2.10d. Add vertices {w1 , w2 } with N (w1 ) = {p1 , p2 } and N (w2 ) = {b1 , c2 }.
This yields a centralizer for G, so A(G) = 2.
We have concluded that each of the cases cannot happen. Therefore β = 1.
Observe the graph G4 (n) satisfies the hypothesis of Proposition 2.5.9 and has a
clique with only one blocking vertex. One way to partition the vertices of G into
B ∪ C ∪ P as described within Proposition 2.5.9 is to let y be the blocking vertex, let
P = {x , y, z}, and let C be the remaining vertices. Proposition 2.5.9 shows that any
dense graph with centralizing number greater than two must be structurally similar
to G4 (n).
We also conjecture that the densest graphs with centralizing number three are
subgraphs of G4 (n).
Definition 2.5.10. Let G13 (n) be the subgraph of G4 (n) where one edge to vertex
z has been deleted. Let G23 (n) be the subgraph of G4 (n) where one edge within the

47
initial clique of n − 5 vertices has been deleted.
Proposition 2.5.11. For n ≥ 8, A(G13 (n)) = A(G23 (n)) = 3.
Proof. For n = 8 and n = 9, we confirm with Algorithm 1 that G13 (n) and G23 (n) have
centralizing number three. For n ≥ 9, we can construct G13 (n) from G13 (n) and G23 (n)
from G23 (n) by twinning a vertex. Hence we apply Proposition 2.4.11 to conclude that
G13 (n) and G23 (n) have centralizing number three for n ≥ 10.
Conjecture 2.5.12. For n ≥ 9, G13 (n) and G23 (n) are the only two graphs of maximal
size on n vertices with centralizing number three.
We showed in Proposition 2.5.11 that G13 (n) and G23 (n) have centralizing number
three. If Conjecture 2.5.4 is proven, then these are examples of maximal size with
centralizing number three and only uniqueness would remain to be proven.

2.6

The asymptotic number of graphs on n
vertices with given centralizing number

In Section 2.3.1 we determined the number of graphs with each centralizing number with up to twelve vertices. The number of graphs with each centralizing number
increases with the number of vertices, but each of the percentages for nonzero centralizing numbers decrease. We proceed by giving more general results on the asymptotic
number of graphs with each centralizing number for a fixed n.
Theorem 2.6.1. Almost all graphs have centralizing number zero.
Proof. Bollob´as [14] proved that almost all graphs have diameter 2 but do not have
a dominating vertex. By Lemma 2.5.5, such graphs are self-centered.

48
This leaves us with the question of how many graphs with a fixed number of
vertices actually have a nonzero centralizing number. We use dominating vertices
to construct a lower found on the number of graphs on n vertices with centralizing
number two.
Let g(n) represent the number of unlabeled graphs on n vertices. Note that
(n2 )
g(n) ≥ 2 n! since each unlabeled graph corresponds to at most n! labeled graphs.
Theorem 2.6.2. The number of graphs on n ≥ 2 vertices with centralizing number
two is bounded below by g(n − 1) − 1.
Proof. Let G be a graph on n − 1 vertices that is not complete, and let G be G with
a dominating vertex. By Corollary 2.4.3, A(G ) = 2. In order to recover the original
graph G from any graph that has been created by adding a dominating vertex, we
remove a dominating vertex.
We use a construction of Liu to determine a lower bound for the number of graphs
on n vertices with centralizing number three or four.
Theorem 2.6.3 ([65]). Let G be a graph with x, y ∈ V (G) where dG (x, y) = diam(G) =
2m − 1, and let n > m. Construct G from G by taking the disjoint union of G and
two Pn s and adding an edge from x to an endpoint of the first Pn and an edge from
y to an endpoint of the second Pn .
1. If ∀u ∈ V (G) we have dG (x, u) + dG (u, y) ≤ 2m − 1, then A(G ) = 2.
2. If ∀u ∈ V (G) we have dG (x, u) + dG (u, y) ≤ 2m and there exists a vertex v with
dG (x, v) = dG (v, y) then A(G ) = 3.
3. Otherwise, A(G ) = 4.

49
The proof of Theorem 2.6.3 heavily relies on Lemma 2.1.3. Using Theorem 2.6.3,
we will construct families of graphs which then can be enumerated to obtain a lower
bound on the number of graphs on n vertices with centralizing number three or four.
Theorem 2.6.4. The number of graphs on n ≥ 11 vertices with centralizing number
three is bounded below by g(n − 10), while the number of graphs on n ≥ 12 vertices is
bounded below by g(n − 11).
Proof. Given a graph G, fix s ∈ V (G). We define graph J3 (G) that satisfies part (2)
of Theorem 2.6.3 and graph J4 (G) that satisfies part (3) of Theorem 2.6.3. Graphs
J3 (G) and J4 (G) are shown in Figure 2.11.
Define the graph J3 (G) by V (J3 (G)) = {x, y, t, z} ∪ V (G) and E(J3 (G)) = E(G) ∪
{xv, tv : v ∈ V (G)} ∪ {yt, zs, zt}. Observe that dJ3 (G) (x, y) = 3 via the path x, v, t, y
for any v ∈ V (G). There is no shorter x, y-path since x is not adjacent to t and
y is not adjacent to any vertex of G. Since z and each vertex of G is adjacent
to t, we have

J3 (G) (x)

=

J3 (G) (y)

= 3,

J3 (G) (z)

= 2, and

J3 (G) (v)

= 2 for any

v ∈ V (G). Hence diam(J3 (G)) = 3, and for any v ∈ V (J3 (G)) \ {z}, we have
dJ1 (x, v)+dJ1 (v, y) = 3. Furthermore dJ3 (G) (x, z) = dJ3 (G) (z, y) = 2, so J3 (G) satisfies
the hypothesis of Theorem 2.6.3 (2).
Next we define the graph J4 (G) by V (J4 (G)) = V (J3 (G)) ∪ {z }; E(J4 (G)) =
E(J3 (G)) ∪ {zz }. Let u, v ∈ V (J3 (G)) and note that dJ4 (G) (u, v) ≤ 3 since J3 (G) is a
subgraph of J4 (G). Also dJ4 (G) (z , v) for any v ∈ V (J4 (G) \ {z }. Thus diam(J4 ) = 3
with dJ4 (G) (x, z ) + dJ4 (G) (y, z ) = 6. Hence J4 (G) satisfies the hypothesis of Theorem 2.6.3 (3).
Finally, for i ∈ {3, 4} we define Ji (G) by taking the disjoint union of Ji (G) and two
P3 s, adding an edge from an endpoint of one P3 to x, and an edge from an endpoint
of the other P3 to y. By Theorem 2.6.3, A(Ji (G)) = i for i ∈ {3, 4}. J3 (G) has 10

50
vertices that are not in V (G), and J4 (G) has 11 vertices that are not in V (G). Since
G was an arbitrary graph, then for i ∈ {3, 4}, the graph G can be any graph on the
remaining n − (7 + i) vertices. Now Ji is a graph with n vertices and has centralizing
number i. Hence for i ∈ {3, 4}, there are at least as many graphs on n vertices with
centralizing number i as there are unlabeled graphs on n − (7 + i) vertices.
In order to show that each J3 (G) and J4 (G) is unique, it is left to show that we can
recover G. Assume G has at least two vertices. The graph J3 (G) has two pendant
vertices. One pendant is part of a P5 where the intermediate vertices have degree
two in J3 (G), while the other pendant is part of a P4 where the intermediate vertices
have degree two in J3 (G). The non-pendant endpoint of the P4 is x. Then G is the
subgraph induced by the neighbors of x in J3 (G) except for the neighbor that is also
on the P4 . The same argument holds for J4 (G), except that it has a third pendant
vertex whose neighbor has degree three.
z
z

x

G

s
t

y

Figure 2.11: The graph above is the graph J4 (G) as described in Theorem 2.6.4.
Vertices x and t are adjacent to every vertex of G. Delete vertex z to obtain the
graph J3 (G).
Note that the methods in Thereom 2.6.4 can be used to obtain a lower bound for
graphs with centralizing number two, but Theorem 2.6.2 yields a stronger bound.
We conclude by making a conjecture about how the number of graphs on n vertices
with each nonzero centralizing number compare to each other.

51
Conjecture 2.6.5. Almost all graphs with nonzero centralizing number have centralizing number two, and almost all graphs with centralizing number greater than two
have centralizing number three.

Acknowledgements
This research was done using resources provided by the Open Science Grid, which is
supported by the National Science Foundation and the U.S. Department of Energy’s
Office of Science. In particular, the authors would like to thank Derek Weitzel of the
Holland Computing Center for his help with accessing and running our program on
the Open Science Grid. The authors would also like to thank Zheng Yang, Pei Pei,
and Alex Kunin for assistance with translating references into English.

52

Chapter 3
Hypergraphs1

1
Section 3.5 is joint work with Catherine Erbes, Michael Ferrara, Stephen Hartke, Benjamin
Reiniger, Hannah Spinoza, and Charles Tomlinson and has been published in [6].

53

3.1

Introduction

3.1.1

Realizability

A hypergraph H is an ordered pair of a vertex set and an edge set where edges are
subsets of the vertices. A simple hypergraph contains no repeated edges, while a
multihypergraph allows for repeated edges. In a k-uniform hypergraph, or k-graph,
every edge contains exactly k edges. A 2-graph is also known as a graph. Unless
otherwise stated, we assume all k-graphs are simple.
The degree of a vertex in a hypergraph H is the number of edges containing v, and
the degree sequence of H is the list of degrees for each vertex of H. Degree sequences
are typically written in nonincreasing order. A sequence of nonnegative integers π is kgraphic if there exists a hypergraph H that has π as its degree sequence. Furthermore,
we say H realizes π.
Given a nonincreasing sequence π, it is a natural question to ask whether or not
π is k-graphic.
Problem 3.1.1. Find an efficient characterization for the k-graphic sequences.
In the case of k = 2, Problem 3.1.1 is well understood. In fact, there are many
characterizations of graphic sequences. Two of the most famous characterizations are
the Havel-Hakimi [47, 44] and the Erd˝os-Gallai [33] characterizations. Sierskma and
Hoogeveen [79] listed seven different characterizations and proved they are equivalent. More information on degree sequence and additional criterion were given by
Mahadev and Peled [68]. Additionally, Kleitman and Wang [56] gave a characterization for directed graphs that is similar to the characterization of Havel and Hakimi.
With this much information for graphic sequences, it is natural to extend the problem to k-graphic sequences. However, there are significantly fewer results for k ≥ 3.

54
Dewdney [31] gave the only known characterization of k-graphic sequences. His characterization is similar to Havel and Hakimi’s characterization, but it is inefficient as
it requires testing the graphicality of many smaller sequences.
Bhave, Bam and Deshpande [10] also gave a characterization k-graphic sequences
with respect to linear hypergraphs that is similar to the Erd˝os-Gallai characterization. Linear hypergraphs are hypergraphs where every pair of edges share at most one
vertex. Others have worked towards Problem 3.1.1 by giving necessary conditions.
Some of these necessary conditions are from Achuthan, Achuthan and Simanihuruk [1], Billington [13], and Choudum [25]. Unfortunately, Achuthan, Achuthan and
Simanihuruk [1] showed that none of the necessary conditions from [1, 13, 25] are
sufficient.
There are surprisingly few sufficient conditions for a sequence to be k-graphic for
any k ≥ 3. Billington [13] gave a heuristic for constructing a hypergraph from a 3graphic degree sequence. Billington’s algorithm is polynomial, but it does not always
produce a hypergraph from a sequence that is 3-graphic. Behrens, Erbes, Ferrara,
Hartke, Reininger, Spinoza, and Tomlinson [6] gave several sufficient conditions that
are inspired by the results of Yin and Li [86], Aigner and Triesch [2] and Barrus,
Hartke, Jao, and West [5] for 2-graphic sequences. Their sufficient conditions depend
on the sum of the sequence and the maximum and minimum terms of the sequence.
Instead of providing necessary or sufficient conditions, Colbourn, Kocay, and Stinson [29] presented evidence that Problem 3.1.1 could be NP-complete for k = 3,
showing that several related problems for degree sequences are in fact NP-complete.

55

3.1.2

Connectedness

As a related problem, there is interest in moving among realizations of a degree
sequence by making small changes to the hypergraphs. A t-switch on a hypergraph
H is replacing t edges with t other edges such that the resulting hypergraph has the
same degree sequence as the original hypergraph. If a t-switch can be performed on
a hypergraph, we say the hypergraph admits a t-switch. Given a k-graphic degree
sequence π and a collection of switches S, we say the space of realizations is connected
by S if for any two k-graph realizations of π, one can be obtained from the other by
performing a sequence of switches from S. In other words, if the space of realizations
is connected by S then any realization can be transformed into another realization
by only using switches from S and any intermediate k-graph is also a realization of
π (and only having simple k-graphs for intermediate graphs). Similarly, the space of
multigraph realizations is connected by S if for any two multi-k-graph realizations of
π, one can be obtained from the other by performing a sequence of switches from S.
Petersen [71] and subsequently others (for instance, Fulkerson, Hoffman, and
McAndrew [39]) showed that for any two realizations of a 2-graphic sequence, one
realization can be obtained from the other by a sequence of 2-switches. Kocay and
Li [57] proved the space of multi-3-graph realizations is connected by the set of all
possible 2-switches, and recently Behrens, Erbes, Ferrara, Hartke, Reininger, Spinoza,
and Tomlinson [6] extended Kocay and Li’s result to show the space of multi-k-graph
realizations is connected by the set of all possible 2-switches for any k. Behrens et
al. [6] also generalized an example of Gabelman [40] to show there exist sequences
whose realization graphs for simple hypergraphs is not connected by using only tswitches for t < k. This result leads to the following problem.
Problem 3.1.2. Determine a minimum family of switches such that for any π, the

56
space of simple k-uniform realizations is connected by those switches.
In fact, it is not known if the set of all t-switches for i ≤ k is sufficient to connect
the space.
Finding a minimal set of switches that connects the space of realizations has applications in network science; specifically, generating a realization chosen uniformly at
random, which can be done using Markov chain Monte Carlo methods. The connectivity of the space for 2-graphs allows for uniform random sampling. For some results
of using Markov chains for 2-graphs, see [35, 43, 52, 76]. Additionally, the Markov
chain Monte Carlo methods can be used to give an approximation of the number
of realizations for a degree sequence [51]. If we have set of switches connecting the
space of 3-graph realizations, then we can use Markov chain Monte Carlo with the
realizations of a 3-graphic sequence as well.

3.1.3

Results

We approach Problem 3.1.2 for the case of k = 3 from two different directions. We
extend this classification in Section 3.3 to all 3-graphs that do not admit a 2-switch
but differ by a 3-switch. Our investigation of slanted sequences is in Section 3.4,
where we broaden the search to realizations that admit 2-switches. As an application
of using switches, we provide a result about packing in Section 3.5. In further joint
work [6], we provide sufficient conditions for a sequence to be k-graphic, show the
space of multi-k-graph realizations is connected by 2-switches for any k, and generalize
the example from Gabelman [40].

57

3.2

Classification of pseudo-threshold 3-graphs

One way of approaching Problem 3.1.2 for k = 3 is to first look for sequences whose
space of realizations is not connected by using only 2-switches. Behrens et al. [6]
generalize an example of Gabelman [40] by defining a matrix A




x1,2
 x1,1


x2,2
 x2,1

 .
..
A =  ..
.


xk−1,1 xk−1,2


−z1
−z2

...

x1,k−1

...
...

x2,k−1
..
.

. . . xk−1,k−1
...

−zk−1

−y1 


−y2 

.. 
. 


−yk−1 


w

where
k−1

yj =

k−1

xj,i ,
i=1

zj =

k−1

xi,j ,
i=1

and

w=

xi,j .
i,j=0

and each set of k entries sums to zero if and only if the set forms a row or column in
A. One way to find such a matrix is to let the xi,j ’s be a power of some sufficiently
small . They define a k-graph H on k 2 vertices by assigning each vertex the weight
of a different entry of A. Any k-set is an edge of H if it has positive total weight
or corresponds to a row in A. Since a t-switch takes t edges and replaces them with
t non-edges, the switch takes t k-sets with nonnegative total weight to t k-sets with
nonpositive total weight. As the degrees remain the same, the two sets of t edges
have the same weight. Hence the total sum of vertex weights in each set of t edges is
zero, and thus the t-switch takes k-sets with a total weight of zero and replaces them
with k-sets that also have a total weight of zero. Since degrees of each vertex remain
the same, this means the t-switch is the k-switch taking the k rows to the k columns.
We formally define this type of example as a pseudo-threshold hypergraph.

58
Definition 3.2.1. A k × k matrix M is a pseudo-threshold matrix if
1. The entries in any row or column sum to zero.
2. No other set of k entries of M sum to zero.
Definition 3.2.2. A k-uniform hypergraph H on k 2 vertices is pseudo-threshold if
there exists a weight assignment to the vertices so that weights are the entries of a
pseudo-threshold matrix M and the edges of H meet the following criteria:
1. Any k-set of vertices with positive sum forms an edge.
2. Any k-set of vertices with negative sum does not form an edge.
3. The rows of M correspond to edges of H and the columns are non-edges, or
vice versa.
We say the matrix M is associated with H. Let HR (M ) be the hypergraph with rows
as edges and HC (M ) be the hypergraph with columns as edges.
In particular, observe that every pseudo-threshold matrix is associated with two
pseudo-threshold hypergraphs HR (M ) and HC (M ). However, every pseudo-threshold
hypergraph has infinitely many pseudo-threshold matrices associated with it. For
example, if M is associated with the pseudo-threshold hypergraph H, then 2M is
also associated with H, where 2M is the matrix formed by multiplying every entry
of M by two.
Lemma 3.2.3. If M is a pseudo-threshold matrix, then neither HR (M ) nor HC (M )
admit a 2-switch. Furthermore, HR (M ) and HC (M ) differ by a 3-switch.
We classify all pseudo-threshold k-graphs in the case k = 3. We provide a characterization of all pseudo-threshold 3-graphs by determining a complete list of matrices

59
M that generate distinct pseudo-threshold hypergraphs. Every pseudo-threshold 3graph gives a degree sequence whose space of realizations is not connected by using
only 2-switches. In Section 3.3 we discover this list of pseudo-threshold 3-graphs yields
the complete list of hypergraphs that differ by a 3-switch but admit no 2-switch.
We take the following steps to obtain the classification of pseudo-threshold 3graphs.
1. Set a standard form for pseudo-threshold matrices.
2. Consider different cases of the standard form based on vertex weights.
3. Combine redundant cases.
4. For each remaining case, find the list of distinct weights of triples whose sign is
not determined by the sign of the vertex weights.
5. For each list, check each possible sign assignment with a linear program to see
if there is a pseudo-threshold matrix satisfying that assignment.
6. Eliminate matrices that generate isomorphic graphs.
In order to set a standard form for pseudo-threshold matrices, we consider operations on matrices that preserve the property of being pseudo-threshold.
Proposition 3.2.4. Let M be a pseudo-threshold matrix associated with a pseudothreshold hypergraph H. Let M be a matrix resulting from performing row-swaps
and/or column-swaps on M and let M T be the transpose of M . Then M and M T
are also associated with H. Furthermore, HR (M )

HR (M ) and HR (M )

HC (M T ).

Proof. Since M , M , and M T have the same set of entries, each matrix has exactly
2k k-sets that sum to zero. Thus in order to show M and M T are associated with H,

60
then it is enough to check that the rows and columns of M and M T sum to zero. Let
(a1 , a2 , . . . , ak ) be a row of M . Observe that row-swaps change the order of the rows,
but the contents of the individual rows. Also, column-swaps change the order of the
contents of the rows, but does not change the actual content. Hence a1 , a2 , . . . , ak
are the entries of some row of M , so their sum is zero. Similarly, if (a1 , a2 , . . . , ak ) is
a column of M , then a1 , a2 , . . . , ak are the entries of some column of M and have a
sum of zero. Since the rows and columns of M T are the columns and rows of M , we
also have that the rows and columns of M T sum to zero.
To show the isomorphisms, let e be an edge of HR (M ). Then e corresponds to
a k-set (a1 , a2 , . . . , ak ) in M that is either a row or has positive weight. If the k-set
has positive weight, follow the transformation from M to M and it corresponds to
an edge in HR (M ). If the k-set is a row, then as argued above it is also a row of
M , so it also corresponds to an edge in HR (M ). Similarly, non-edges of HR (M ) are
mapped non-edges of HR (M ) under the transformation given by changing M into
M . Thus HR (M )

HR (M ). A similar argument applies for HR (M )

HC (M T ),

with the exception that rows get mapped to columns and vice versa.

Step 1: Set a standard form for pseudo-threshold matrices.
As we seek a classification of pseudo-threshold 3 × 3 matrices that produce different
pseudo-threshold hypergraphs, the first step towards this goal is to obtain a standard
form for the matrices. By Proposition 3.2.4, we can use row-swaps, column swaps,
and transposition to assume that any pseudo-threshold 3x3 matrix M has the form






M =



−(a + b) 

c
d
−(c + d) 


−(a + c) −(b + d) a + b + c + d
a

b

61
with |a| ≤ |b| ≤ |c| and |a| ≤ |d|. Note this is an assumption on the 2 × 2 submatrix in the upper left corner of M . The entries in the third row and column
are a consequence of the requirement that rows and columns sum to zero. Observe
that no two entries can be equal since the only 3-sets with total weight zero are the
rows and columns. For example, if a = b, then the triple (b, c, −(a + c)) has weight
b + c − a − c = a + c − a − c = 0, but the triple is neither a row nor column of M .

Step 2: Consider different cases of the standard form based on vertex
weights.
To continue the classification of pseudo-threshold matrices, we break the format of
the matrix into cases based on the signs of the vertex weights. If we look at the sign
of the vertex weights, we can sometimes determine if a triple is an edge or nonedge
without knowing the exact value of the weights. Notice that any three nonnegative
weighted vertices must form an edge, while any three nonpositive weighted vertices
cannot form an edge. However, if we have a mixture of positive and negative weights,
then we must know the exact weights to determine whether or not those vertices form
an edge. Hence, in order to determine all pseudo-threshold 3-graphs, we can focus on
determining which combinations of positive weight mixed sign triples can occur.
Recall we assume |a| ≤ |b| ≤ |c| and |a| ≤ |d|. If we also place assumptions on
whether each of a, b, c, and d are nonnegative (+) or nonpositive (−), we obtain the
sixteen cases shown in Figure 3.1. Observe that the sign of the remaining five entries
of the matrix are frequently determined by the combination of assumptions on the
signs and relative magnitudes of a, b, c and d. For example, if a > 0 and d < 0 then
a + d > 0 and hence the entry −(a + d) must be positive. However there are times
when the sign of the weight of a vertex is not determined. Entries whose signs are
not determined are represented by a question mark.

62



+ + −


 + + −
− − +




− + −


 + + −
− − +

(a)






+ − +


− + ? 
+ ? ?



+ + −


+ − ? 
− ? ?


−

−
+

(f)

− + −


− − + 
+ ? −


+ −

+ ?
− ?




+ + −


− − +
+ ? −

(j)




+ + −


− + ? 
+ − ?
(d)




− + −


+ − ? 
− ? ?

(g)


+ − +


+ − ? 
− + ?

(i)



(c)



− − +


 + + −
− ? +

(e)



(m)


+ − +


+ + −
− ? +

(b)







(h)




+ − +


− − + 
+ + −

(k)




− − +


+ − ? 
− + ?


−

−
+

(n)


− +

+ ?
? ?
(o)

(l)





− − +


− − + 
+ + −
(p)

Figure 3.1: Assume |a| ≤ |b| ≤ |c| and |a| ≤ |d|. Given the sign (nonnegative or
nonpositive) of the values a, b, c, and d, the signs of most of the entries in the third
row and third column are also determined. The question mark represents entries with
nondetermined signs.
Step 3: Combine redundant cases.
Figure 3.1 gives a total of 24 = 16 cases with additional subcases for each undetermined entry. However, these cases are not unique; in fact, they are extremely
redundant. As an example, let a = 1, b = 2, c = 3, and d = 4, which yields the
following pseudo-threshold matrix.



2 −3
1


3

4
−7




−4 −6 10

63
This matrix is in the form of Figure 3.1a. Applying row-swaps, column-swaps, and
transpositions, we also obtain the following matrices.







4 −7
3


−4 −6 10 




1
2 −3

 4 −6 2 


−7 10 −3




3 −4 1





 2 −3 1


 4 −7 3




−6 10 4

These three matrices match the form of Figures 3.1i, 3.1k and 3.1j, respectively. Thus
one pseudo-threshold matrix can be written in the form of at least four of the cases
listed in Figure 3.1. In order to combine redundant cases, we apply Proposition 3.2.4
to show that every case is equivalent to either Figure 3.1h or 3.1i
Proposition 3.2.5. Any pseudo-threshold 3-graph is associated with a pseudo-threshold
matrix M with the form of Figure 3.1i or Figure 3.1i.
Proof. Observe that every matrix in Figure 3.1 except for 3.1e and 3.1o contain
+ −
− +

or

− +
+ −

as a submatrix. In the matrix of Figure 3.1e, if the question mark

in the second row or column was nonnegative, we would have a desired submatrix. If
both are nonpositive, then the remaining question mark must be nonnegative, which
also obtains a desired submatrix. The case for the matrix in Figure 3.1o follows
symmetrically. Thus any pseudo-threshold matrix contains

+ −
− +

or

− +
+ −

as a

submatrix.
Recall that we assume a pseudo-threshold matrix has the standard form










−(a + b) 

c
d
−(c + d) 


−(a + c) −(b + d) a + b + c + d
a

b

with |a| ≤ |b| ≤ |c| and |a| ≤ |d| and we achieved this by using row-swaps, column-

64
swaps, and transpositions to place the four entries in the desired order. Let M be a
pseudo-threshold matrix, and let M be matrix obtained from M by applying rowswaps and column swaps to put a

+ −
− +

or

− +
+ −

submatrix in the upper left corner.

By Proposition 3.2.4, M is a pseudo-threshold matrix and M and M are associated
with the same pair of pseudo-threshold hypergraphs. Apply row-swaps, columnswaps, and transpositions to M to put the four entries of the upper left corner in the
desired order and let M be the resulting matrix. Observe the upper left corner of
M still has either the

+ −
− +

or

− +
+ −

pattern. Note the entries in the third row and

column of the matrices in Figure 3.1 are a direct result of the assumption made on the
four entries in the upper right corner. Hence M has the form of either Figure 3.1i or
Figure 3.1i and is associated with the same pseudo-threshold hypergraphs as M .
Corollary 3.2.6. Any pseudo-threshold hypergraph H is associated with a pseudothreshold matrix M where M or −M has the form of Figure 3.1i.
Proof. If H is not associated with a matrix in the form of Figure 3.1i, then by Proposition 3.2.5 it must be associated with a matrix M in the form of Figure 3.1h. Observe
Figures 3.1h and 3.1i share nondetermined entries a every determined entry in Figure 3.1h is the negative of the corresponding entry in Figure 3.1i. Thus −M (the
matrix formed by taking the negative entries of M ) is in the form of Figure 3.1i.
Since we have limited the cases to only one of the matrices from Figure 3.1, we
determine the possible subcases of Figure 3.1i. If we assume that the question mark
in the second column of Figure 3.1i is nonnegative, then we have |d| ≤ |b| ≤ |c|, so the
question mark in the second row is also nonnegative. In order for the third row or
column to have a sum of zero the question mark in the third row and third column
must be nonpositive. This yields the sign matrix of Figure 3.2a. In order for the third
column to have a total weight of zero, at least one of the two question marks in the

65
third row must be nonpositive. Thus if the question mark in the second column is
nonpositive,

+ −

− +
+ +

then the sign matrix must be one of Figure 3.2b, 3.2c, or 3.2d.







+
+ − +
+ − +
+ − +







+
− + −
− + −
− + + 
−
+ − −
+ − +
+ − −

(a)

(b)

(c)

(d)

Figure 3.2: The four ways to fill out the question marks from Figure 3.1i.

Step 4: For each remaining case, find the list of distinct weights of triples
whose sign is not determined by the sign of the vertex weights.
By Corollary 3.2.6, every pseudo-threshold 3-graph can be represented by a matrix
M or −M with the form of one of the four matrices of Figure 3.2. Observe the
complement of HR (M ) is HC (−M ). In other words, the list of all pseudo-threshold
matrices M that are in the form of Figure 3.1i and that generate distinct hypergraphs
along with −M will generate the complete list of pseudo-threshold 3-graphs. For each
of the four matrices in Figure 3.2, we seek the distinct pseudo-threshold 3-graphs with
a matrix of that form. In order to accomplish this, we now focus on the sign of the
weight of each triple, which then allows us to focus on the possible edge combinations.
For example, in every matrix with the form of Figure 3.2a, a + d − (c + d) > 0 as
each of a, d, and −(c + d) are nonnegative, so the associated hypergraph must have
the edge (a, d, −(c + d)). Similarly, (b, c, a + b + c + d) is a nonedge. However (a, b, c)
may or may not be an edge, based on the actual values of a, b, and c. For all triples,
we use SageMath [81] version 5.8 to determine whether or not the sign of the total
weight is known based on the assumptions about the sign of a, b, c, and d as well of
the relationships between the absolute values of a, b, c, and d. The SageMath code is
given in Algorithm 2.

66
Any triple whose weight is not determined by those assumptions is recorded. Additionally we notice relationships among the list of undetermined triples. In particular,
we found triples whose weight was the negative of the weight of another triple on the
list. For example, in Figure 3.2a, exactly one of (a, b, −(c + d)) and (−(a + b), c, d) is
an edge since their weights are a + b − c − d and −(a + b − c − d). Hence only one of
the two triples needs to be listed as the edge status of the second triple is determined
by the first triple.
Algorithm 2 Finds triples whose weight is not determined for Case 3.2a
a, b, c, d=var(‘a, b, c, d’)
assume(c < b, b < 0, 0 < a, a < d, a < −b)
assume(a + c < 0, b + d < 0, c + d < 0, a + b + c + d < 0)
pos=[a, d, −(a + b), −(c + d), −(a + c), −(b + d)]
neg=[b, c, a + b + c + d]
for i, j ∈ pos, k ∈ neg, i = j do
wt=i + j + k
if not bool(wt > 0) and not bool(wt< 0) and not bool(wt== 0): then
print (i, j, k)
for i ∈ pos, j, k ∈ neg, j = k do
wt=i + j + k
if not bool(wt > 0) and not bool(wt< 0) and not bool(wt== 0): then
print (i, j, k)

For each matrix in Figure 3.2, the weights for each undetermined triple is listed
in Table 3.1.

Step 5: For each list, check each possible sign assignment with a linear
program to see if there is a pseudo-threshold matrix satisfying that
assignment.
At this point we have the list of weights of triples whose sign is not determined.
In order to obtain a complete list of pseudo-threshold 3-graphs, we take each list of
nondetermined weights and check each possible sign assignment to the weights of the

67
Case 3.2a
a+b+d
a+c+d
2a + b + c + 2d
a+b−c−d
2a + b
2a + c
c + 2d
b + 2d
−a − 2b + c − d
−a + b − 2c − d

Case 3.2b
a+c+d
2a + b + c + 2d
−2b − d
a+b−c−d
2a + b
a − b − c − 2d
c + 2d
−a − 2b − c − 2d
−2a − c
−a + b − 2c − d

Case 3.2c
−b − c − d
−2b − d
−2c − d
2a + 2b + c + d
2a + b + 2c + d
2a + b
2a + c
a + 2b + 2c + d
−a + b − 2c − d
a − b − c − 2d

Case 3.2d
−2b − d
−2a − c
−2a − b
−a + b − 2c − d
a + 2b + c + 2d
a + b + 2c + 2d
a − b − c − 2d

Table 3.1: List of weights of triples whose sign is not determined.
triples to check if there exists a matrix satisfying the sign assumptions. For example,
the Linear Program 3 with B = 1111000000 checks if there exists a way of assigning
values to a, b, c, and d satisfying the assumptions on a, b, c, and d such that the first
four sums in the first column of Table 3.1 are positive and the remaining sums are
negative.
Linear Program 3 Finding possible vertex weights for Case 3.2a
Solve: a, b, c, d
Subject to:

a≥0
b≤0
c<b
d>a
b+d≤0
a, b, c, d ∈ R

Additional constraints:
Input: B ∈ {0, 1}10
for i ∈ {1, 2, . . . , 10} do
Let y be the ith entry of Case 3.2a in Table 3.1
if B[i] = 1 then
y>0
else
y<0

68
The matrices generated in this manner gives us a partially complete list of pseudothreshold hypergraphs. As mentioned earlier, we ignored the matrix of Figure 3.1h.
Hence for each matrix M on this list, we must also add the matrix −M to the list.
Now we have a list of matrices representing every pseudo-threshold hypergraph. Note
this list produces isomorphic pseudo-threshold hypergraphs. One way this arises is
that

+ −
− +

or

− +
+ −

appears multiple times in the matrices of Figure 3.2.

Step 6: Eliminate matrices that generate isomorphic graphs.
For each hypergraph from this list, no two vertices have the same degree. Hence we
check for isomorphic hypergraphs by ordering the vertices by degree and searching
for identical edge assignments. After removing isomorphic copies, a list of matrices
representing every pseudo-threshold hypergraph appears in Table 3.2.

a
0
0
0
0
-2
-3
-4
-4

41
b
4
5
6
7
3
4
5
6

edges
c
d
6
-1
6
-2
7
-4
9
-4
11 -7
19 -9
14 -11
11 -10

a
0
0
0
0
0
0
-2
-2

42 edges
b c
1 7
2 9
3 6
3 6
5 7
6 9
3 12
3 16

d
-3
-5
-1
-2
-4
-4
-9
-7

42
a
0
0
0
0
0
0
2
2

edges (ctd)
b
c d
-1 -7 3
-2 -9 5
-3 -6 1
-3 -6 2
-5 -7 4
-6 -9 4
-3 -12 9
-3 -16 7

a
0
0
0
0
2
3
4
4

43
b
-4
-5
-6
-7
-3
-4
-5
-6

edges
c
-6
-6
-7
-9
-11
-19
-14
-11

d
1
2
4
4
7
9
11
10

Table 3.2: The complete list of non-isomorphic pseudo-threshold 3-graphs, each represented by the matrix with the given weights.

Theorem 3.2.7. The complete list of pseudo-threshold 3-graphs is given by Table 3.2.
Observe all of the pseudo-threshold 3-graphs have between 41 and 43 edges, which
is within one of half of the number of possible triples. Additionally, none of these
3-graphs are self-complementary.

69

3.3

Hypergraphs with no 2-switch

Recall our focus is on Problem 3.1.2. In this section, we focus on hypergraphs that do
not admit a 2-switch and seek switches necessary to connect the space of realizations.
If two hypergraphs differ by a 3-switch, it does not imply that the two hypergraphs
are in separate components of the space of realizations via 2-switches. For example,
Figure 3.3 shows how to achieve a 3-switch by using only 2-switches. However, if the
hypergraph already contains any of the intermediate edges of Figure 3.3, then this
sequence cannot be used to obtain the 3-switch by 2-switches. To ensure the 3-switch
is required, we focus on 3-graphs that do not admit a 2-switch. This guarantees that
there is no way to obtain a t-switch for t ≥ 3 by using 2-switches. For example, if
(x, y, z) and (u, v, w) are edges in a 3-graph H that does not admit 2-switches, then
either (x, v, w) or (u, y, z) must also be in E(H). Otherwise H would admit the 2switch from (x, y, z) and (u, v, w) to (x, v, w) and (u, y, z). More specifically, for any
two disjoint edges of H and any way of splitting those six vertices into two triples,
at least one of the triples must be in E(H). Additionally, for any two edges of H
that share one vertex z and any way of splitting the remaining four vertices into pairs
(x, y) and (u, v), at least one of (x, y, z) and (u, v, z) must be in E(H).
It may be possible that there exists a pair of hypergraphs on the same degree
sequence that are in separate components of the space of realizations over 2-switches
where at least one of the hypergraphs admits a 2-switch. However, the only currently
known examples where the space of realizations is disconnected is with a pair of
hypergraphs where neither admits a 2-switch.
Now if H1 and H2 are two 3-graphs that differ by a 3-switch but neither 3-graph
admits a 2-switch, we have that H1 and H2 are isolates in the space of realizations over
2-switches. However, they are connected in the space of realizations over 2-switches

70

Figure 3.3: An example of how a 3-switch can be accomplished by using 2-switches.
and 3-switches. Hence we say H1 and H2 are an isolated pair.
Definition 3.3.1. An isolated pair is a pair of 3-graphs H1 and H2 such that neither hypergraph admits a 2-switch and the two hypergraphs have the same degree
sequence.
For example, every matrix M represented in Table 3.2 yields the isolated pair
HR (M ) and HC (M ). We prove that every isolated pair that differ by a 3-switch
contains a 3-graph from Table 3.2 as an induced subhypergraph.
For any isolated pair, the two 3-graphs must differ by a t-switch for some t ≥ 3.
While some 3-switches involve nine distinct vertices, such as the 3-switch in Figure 3.3,
some 3-switches only involve eight or fewer vertices. For example, the 3-switch exhibited in Figure 3.4 involves six distinct vertices. We show that any isolated pair is
on at least nine vertices.

Figure 3.4: An example of a 3-switch on 6 vertices.

Lemma 3.3.2. There are no isolated pairs on eight or fewer vertices.
Proof. To determine that no isolated pairs on eight or fewer vertices exist, we solve
Integer Program 4.

71
Integer Program 4 Isolated pairs on 8 vertices
Define: V = {0, 1, . . . , 7}
T = {i, j, k} : i, j, k ∈ V, |{i, j, k}| = 3
Solve:
Subject to:

{xt }t∈T {yt }t∈T
1. x{0,1,2} = 1, y{0,1,2} = 0
2. xs + xt − (xa + xb ) ≤ 1
3. ys + yt − (ya + yb ) ≤ 1
(xt − yt ) = 0

4.

∀s, t, a, b ∈ T : |s ∩ t| ∈ {0, 1},
a ∩ b = s ∩ t, a ∪ b = s ∪ t
∀s, t, a, b ∈ T : |s ∩ t| ∈ {0, 1},
a ∩ b = s ∩ t, a ∪ b = s ∪ t
∀i ∈ V

t i

5. xt , yt ∈ {0, 1}

∀t ∈ T

The two sets of variables, {xt }t∈T and {yt }t∈T correspond to triples of vertices in
the hypergraphs H1 and H2 . In particular, xt = 1 if and only if t ∈ E(H1 ), and yt = 1
if and only if t ∈ E(H2 ). Setting x{0,1,2} = 1 and y{0,1,2} = 0 guarantees that H1 and
H2 are different hypergraphs.
Constraints 2 and 3 of Integer Program 4 enforce that neither hypergraph admits
a 2-switch. Suppose that s, t ∈ E(H1 ) share at most one vertex, and that a and b are
triples with a ∩ b = s ∩ t and a ∪ b = s ∪ t. Then at least one of a or b is an element
of E(H1 ), else H1 would admit a 2-switch. Observe xs + xt − (xa + xb ) > 1 if and
only if s, t ∈ E(H1 ) and a, b ∈
/ E(H1 ). Thus the constraint xs + xt − (xa + xb ) ≤ 1
prevents H1 from having a 2-switch from s, t to a, b. Note that no 2-switch is possible
involving s and t if s and t have more than one vertex in common.
In order to ensure the two hypergraphs are a isolated pair, they must have the
same degree sequence and neither hypergraph can admit a 2-switch. Note that

xt
t i

is the degree of vertex i in H1 , so constraint 4 enforces that H1 and H2 have the same
degree sequence.
We solved Integer Program 4 using CPLEX [49] and GLPK [41] on a linux-based
computer powered by a quad-core Intel CPU running at 2.4GHz, and it finished in

72
two hours. The integer program revealed there is no solution to the given parameters,
so there does not exist an isolated pair on eight vertices. If there was an isolated pair
with fewer vertices, then the integer program would have found a solution where both
hypergraphs have an isolated or dominating vertex. Thus every isolated pair has at
least nine vertices.
Proposition 3.3.3. If H1 and H2 are an isolated pair on nine vertices, then there
exists a matrix M with entries given in Table 3.2 so that H1

HR (M ) and H2

HC (M ).
Proof. We run Integer Program 5 to determine the existence of isolated pairs that
are not pseudo-threshold hypergraphs.
Integer Program 5 Isolated pairs on 9 vertices
Define:
Solve:
Subject to:

V = {0, 1, . . . , 8}
T = {i, j, k} : i, j, k ∈ V, |{i, j, k}| = 3
{xt }t∈T {yt }t∈T
1. x{0,1,2} = 1, y{0,1,2} = 0
2. xs + xt − (xa + xb ) ≤ 1

(xt − yt ) = 0

∀s, t, a, b ∈ T : |s ∩ t| ∈ {0, 1},
a ∩ b = s ∩ t, a ∪ b = s ∪ t
∀s, t, a, b ∈ T : |s ∩ t| ∈ {0, 1},
a ∩ b = s ∩ t, a ∪ b = s ∪ t
∀i ∈ V

xt −

∀i ∈ V \ {2, 8}

3. ys + yt − (ya + yb ) ≤ 1
4.
t i

5.
t i

xt ≥ 0
t i+1

xt −

6.
t 0

7.

xt ≥ 0
t 3

xt = m
t∈T

8.

xt < m

∀ pseudo-threshold hypergraphs H on m edges

t∈E(H)

9. xt , yt ∈ {0, 1}

∀t ∈ T

Integer Program 5 is made from Integer Program 4 by adding constraints 5-8 and
increasing the number of vertices to nine. To further break symmetries, we place an
order on the vertex degrees. Lemma 3.3.2 implies that all nine vertices are involved
in the t-switch. Hence any maximum degree vertex must appear in some edge in

73
the first hypergraph that is not an edge in the second hypergraph. Thus we assume
vertex 0 is a vertex with maximum degree. Additionally, we may assume that vertex
1 has higher degree than vertex 2, and vertex i has higher degree than vertex i + 1
for i ∈ {3, 4, 5, 6, 7}. This is reflected in constraints 5 and 6.
We split the search into cases by total number of edges m, as set in constraint
7. First, we set it to look for isolated pairs with at most 40 edges, and again with
at least 44 edges (changing constraint 7 to an inequality). These searches yield no
examples. Next, we examine the three cases of 41, 42, and 43 edges. For any of
the pseudo-threshold matrices, there are exactly two ways of placing an associated
pseudo-threshold 3-graph onto vertices following the assumptions on vertex degrees
(one for the row and one for the column). Hence in our search for a fixed number
of edges, we eliminate the previously found pseudo-threshold 3-graph examples by
adding the constraint that the sum of the triples forming edges in those examples is
less than the total number of edges. This is reflected in constraint 8.
The integer program returns that there is no integer solution to the given parameters. Hence there are no additional isolated pairs on nine vertices. The integer program for each case by number of edges was run on a single computer using
GLPK [41] and CPLEX [49]. The GLPK version finished in four hours for each case,
while CPLEX finished in about twenty minutes for each case.

Note that we have been focusing on 3-graphs on nine vertices, but Definition 3.3.1
allows for more vertices. In fact, it is possible that an isolated pair H1 and H2 are
hypergraphs on more than nine vertices. For example, for some pseudo-threshold 3×3
matrix M , let H1 be the hypergraph defined with vertex set V (HR (M )) ∪ {u, v} and
edge set E(HR (M )) ∪ {(u, v, x) : x ∈ V (HR (M ))} and H2 on the same vertices with

74
edge set E(HC (M )) ∪ {(u, v, x) : x ∈ V (HC (M ))}. Then H1 and H2 are an isolated
pair. Hence the statement of Theorem 3.3.4 only requires the pseudo-threshold 3graphs to be induced.
Theorem 3.3.4. If H1 and H2 are an isolated pair that differ by a 3-switch, then H1
and H2 each contain as an induced subhypergraph a pseudo-threshold 3-graph on the
9 vertices involved in the 3-switch.
Proof. Suppose H1 and H2 are an isolated pair on at least ten vertices. By Lemma 3.3.2,
H1 and H2 must differ on at least nine vertices. Thus the 3-switch must occur on exactly nine distinct vertices as any 3-switch involves at most nine vertices. Let G1 and
G2 be the induced subhypergraphs of H1 and H2 on those nine vertices. Then neither
G1 nor G2 admits a 2-switch, else H1 or H2 would admit a 2-switch. Hence G1 and
G2 are a isolated pair on nine vertices. In particular, G1 and G2 are pseudo-threshold
3-graphs.
Suppose a 3-switch replaces the edges {e1 , e2 , e3 } with the edges {e4 , e5 , e6 }. The
3-switch is a transversal 3-switch if whenever vertices u and v are in the same edge
from {e1 , e2 , e3 } then they are in different edges of {e4 , e5 , e6 } and vice versa. An
example of a transversal 3-switch is given in Figure 3.5. Since HR (M ) and HC (M )
differ by a transversal 3-switch for any pseudo-threshold matrix M , we obtain the
following corollary.
Corollary 3.3.5. Suppose H1 and H2 are an isolated pair that differ by a 3-switch.
Then the 3-switch connecting them must be a transversal switch.
Since Proposition 3.3.3 did not depend on a 3-switch, the proof of Theorem 3.3.4
also yields the following result.

75

(a)

(b)

Figure 3.5: A transversal 3-switch.
Corollary 3.3.6. If H1 and H2 are an isolated pair that differ on at most nine
vertices, then H1 and H2 differ by a 3-switch.

3.4

Slanted sequences

In the previous section, we found specific examples of spaces of realizations that are
not connected by 2-switches. However, each of those examples became connected if we
added the transversal 3-switch. In this section, we continue the search for additional
examples of when the space of realizations is not connected by 2-switches. There are
many sequences of length nine, so we need to narrow down this list.
There is a dominance order on sequences with a fixed sum. In this poset, Aigner
and Triesch [2] showed that 2-graphic sequences form a downset, while Billington [12]
shows that k-graphic sequences also form a downset. Berger [9] showed that if π is
below π, then π has at least as many 2-graphic realizations as π. Barrus, Hartke, Jao,
and West [5] proved that sequences with gaps, and in particular sequences without
repeated values, are also less likely to be 2-graphic. Using these results about 2-graphs
suggest we should examine sequences that do not have repeated terms.
Theorem 3.3.4 gives examples of sequences whose space of realizations is not connected by 2-switches and does not have repeated terms. Similar sequences seem like
the most likely candidates for degree sequences whose realization space is not connected by 2-switches, as fewer realizations have less room to move. Additionally, if

76
two vertices have the same degree and there exist realizations where switching the
vertices creates a distinct realization, then the number of realizations is increased
with more isomorphic copies.
We say a k-graphic sequence is slanted if it does not have any repeated values. We
used a Python program to generate the list of slanted sequences in colexicographic
order. Each sequence was then tested with the necessary conditions of Achuthan,
Achuthan and Simanihuruk [1], Billington [13], and Choudum [25] so it could be
quickly eliminated if it was not 3-graphic. For each remaining slanted sequence π,
we used the libexact library of Kaski and Pottonen [53] to generate the 3-graph
realizations of π. Libexact uses the Knuth’s dancing links technique for updating the
data structure to solve combinatorial exact covering problems. If libexact finds over
50,000 realizations, we move on to the next sequence. For each sequence with at most
50,000 realizations, we use a breadth-first search to check that the realizations are
connected by a 2-switch. We performed the computations in parallel on the Open
Science Grid [74]. This search yields the following result.
Theorem 3.4.1. Every 3-graphic slanted sequence of length at most 8 with at most
50,000 realizations is connected by the set of 2-switches. Every 3-graphic slanted
sequence of length 9 with at most 50,000 realizations is either connected by the set of
2-switches and the transversal 3-switch.
In particular, there were exactly 45 sequences that required a transversal 3-switch
in addition to the 32 sequences given by pseudo-threshold 3-graphs. Additionally,
there exists a pseudo-threshold 3-graphs with sequence π if and only if π is a slanted
sequence with a realization space consisting of two isolates. This theorem provides
more support that the collection of 2-switches along with the transversal 3-switch is
enough to connect the space of realizations for 3-graphic sequences.

77
Conjecture 3.4.2. The space of realizations for 3-graphic sequences is connected by
the set of 2-switches and the transversal 3-switch.

3.5

Applications

In this section we use 2-switches to gain further insight with k-graphic sequences. We
introduce notation to refer to a specific 2-switch. Let e and e be distinct edges in a
k-graph H, and choose vertices u ∈ e \ e and v ∈ e \ e. The operation e

u
v

e deletes

the edges e and e and adds the edges e − u + v and e − v + u (where e − u + v denotes
the set e − {u} ∪ {v}).

3.5.1

Obtaining a “good” realization

One consequence of the Havel-Hakimi characterization of 2-graphic sequences is that
any graphic sequence has a realization in which a specified vertex v is adjacent to
vertices whose degrees are the highest-degree vertices in the graph. This elementary
fact has been proved in several places, for instance [39]. Motivated by this, we prove
the following.
Theorem 3.5.1. Let π = (d1 , . . . , dn ) be a nonincreasing k-graphic sequence, and
let H be a k-realization of π on vertices {v1 , . . . , vn } such that d(vi ) = di for each
i, 1 ≤ i ≤ n. Let i < j and suppose there is an edge e in H such that vj is in e but vi
is not in e. Then there is a realization H of π such that e − vj + vi is an edge in H .
Proof. If e − vj + vi is already an edge in H, we are done. So we can assume this
edge does not exist. Since di ≥ dj , there is an edge f such that vi is in f but vj is
not. Additionally, some such f has the property that f − vi + vj is not an edge in H.

78
Perform the exchange e

vj
vi

f . This does not create any multi-edges, so we have the

desired realization.
An immediate corollary of this result is that for any vertex v of positive degree,
there is a k-realization of π such that v is in an edge with the k − 1 remaining vertices
of highest degree. Thus, there is always a realization of π in which the k vertices of
highest degree are in a single edge. If we could prove the existence of a k-realization
in which the link of a vertex contains only the highest degree vertices, then we would
be able to obtain a Havel-Hakimi-type characterization of k-graphic sequences.

3.5.2

Packing k-graphic sequences

Two n-vertex graphs G1 and G2 pack if they can be expressed as edge-disjoint subgraphs of the complete graph Kn . Kostochka, Stocker, and Hamburger [59], and
Pil´sniak and Wo´zniak [72, 73] recently studied packing of hypergraphs. Busch et
al. [19] extended the idea of graph packing to graphic sequences. We utilize edge
exchanges to examine related questions for hypergraphic sequences.
(1)

(1)

(2)

(2)

Let π1 and π2 be k-graphic sequences with π1 = (d1 , . . . , dn ) and π2 = (d1 , . . . , dn ).
We say that π1 and π2 pack if there exist edge-disjoint k-graphs G1 and G2 on vertex
(1)

set {v1 , . . . , vn } such that dG1 (vi ) = di

(2)

and dG2 (vi ) = di

for all i. When we discuss

packing of graphic sequences, the sequences need not be nonincreasing; however, no
reordering of the indices is allowed.
D¨
urr, Gui˜
nez, and Matamala [32] showed that the problem of packing two graphic
sequences is NP-complete, and we show that the same conclusion holds when considering k-graphic sequences for k ≥ 3.
Theorem 3.5.2. The degree-sequence packing problem for k-graphs is NP-complete
for all k ≥ 2.

79
Proof. The degree-sequence packing problem for k ≥ 2 is in NP since the certificate
giving realizations that pack can easily be checked in polynomial time. NP-hardness
for k = 2 is shown in [32]. For k ≥ 3 we show that any instance of the degree-sequence
packing problem for 2-graphs can be reduced to an instance of the degree-sequence
packing problem for k-graphs. Given 2-graphic sequences π1 and π2 , add k − 2 new
entries to each sequence to create sequences π1k and π2k , with each new entry of πik
equal to 21 σ(πi ). Then, any k-realization of πik has the same number of edges as a
2-realization of πi , and each of the k − 2 vertices associated with the new entries
must appear in every edge. Hence there is a one-to-one correspondence between
2-realizations of the original sequences and k-realizations of the new sequences.
Given the computational complexity of the overarching problem, it is natural to
seek sufficient conditions that ensure a pair of k-graphic sequences pack. Busch et al.
√
showed that if π1 and π2 are graphic sequences and ∆ ≤ 2δn − (δ − 1), where ∆
and δ are the largest and smallest entries in π1 + π2 , then π1 and π2 pack. We prove
a similar result for k-graphic sequences when k ≥ 3.
For a vertex v in a k-graph H, we define the neighborhood of v, NH (v), to be the set
of vertices that are in at least one edge with v. Similarly, for a set S = {v1 , . . . , vm } of
vertices in H, the neighborhood of S is NH (S) = ∪m
i=1 NH (vi ). When H is understood,
we write N (v). Also, let H[S] denote the subgraph of H induced by the vertices in
S.
Theorem 3.5.3. Fix an integer k ≥ 2. There exist constants c1 , c2 (depending only
on k) such that if π1 and π2 are k-graphic sequences each with length n that satisfy

n > c1

∆k/(k−1)
+ c2 ∆,
δ

(3.5.1)

80
where ∆ and δ are the maximum and minimum entries of π1 + π2 , then π1 and π2
pack.
Proof. Among all k-realizations of π1 and π2 , let H1 and H2 be k-realizations such
that the number of double edges in H1 ∪ H2 is minimized. We may assume that
H1 ∪ H2 has at least one multiple edge, lest H1 and H2 give rise to a packing. Let
H = H1 ∪ H2 , e = {v1 , . . . , vk } be a double edge in H, and I = V (H) \

k
i=1

NH (vi ).

Taking c2 > k 2 − k, inequality (3.5.1) implies that I = ∅. Let Q = NH (I).
If there is some edge f that contains more than one vertex of I, say i1 and i2 , then
the 2-switch e

v1
i1

f reduces the number of double edges, contradicting the choice of

H1 and H2 . Hence, each edge including a vertex of I consists of that vertex and k − 1
vertices of Q.
Let Qi = NHi (I) for i ∈ {1, 2}. Suppose Q1 is not a clique in H. That is, let
A = {y1 , . . . , yk } be a set of vertices in Q1 that is not an edge in H. Since each yj
is in Q1 , for each j with 1 ≤ j ≤ k there is an edge fj ∈ H1 that contains both yj
and some vertex of I. Let E = {f1 , . . . , fk } be a set of such edges in H1 , where it
is possible that some fj ’s are equal. Now we can repeatedly perform 2-switches of
the form e

vj
yj

fj until one copy of e is replaced by the new edge {y1 , . . . , yk }, in the

following way. First, do the exchange S1 = e

v1
y1

f1 to obtain edges e1 = e − v1 + y1

and f1 = f1 − y1 + v1 . The edge e1 may already exist in H, but it will be removed in
the next step. The edge f1 cannot exist in H, as it contains both a vertex of e and
a vertex of I. Having performed edge exchanges S1 through Sj , the next exchange
is Sj+1 = ej+1

vj+1
yj+1

fj+1 , unless fj+1 = fp for some p ≤ j. In that case, fj+1 = fp is

no longer an edge, but has been transformed into the edge fp = fp − yp + vp . Then
Sj+1 = ej+1

vj+1
yj+1

fp , and the new edges created in this exchange are ej+1 = ej − vj + yj

and fj = fp − yj + vj . After the k th iteration of this process, we have created the

81
edge consisting of the vertices in A, and removed one of the copies of e, while no new
double edges have been created. Since this contradicts our choice of H1 and H2 , the
vertices of A must already form an edge, so Q1 is a clique. The same argument shows
that Q2 is a clique.
Let vi ∈ e and x ∈ Q, and suppose that e − vi + x is not an edge in H. Let
f be an edge containing x and a vertex of I. Then the switch e

vi
x

f reduces the

number of double edges in H. Hence every vertex of Q is in an edge with each of the
(k − 1)-subsets of e.
Let q = |Q| and r = |E(H[Q])|. Since Q1 and Q2 are cliques, r ≥ 2

q/2
k

. Counting

the degrees of vertices in Q, we have

∆q ≥ kq + (k − 1)δ|I| + kr
q/2
.
k

≥ kq + (k − 1)δ|I| + 2k

Rearranging gives
(∆ − k)q − 2k
|I| ≤
(k − 1)δ

q/2
k

.

(3.5.2)

By the principle of inclusion-exclusion, we also know that
k

|I| = n −

NH (vi )

(3.5.3)

i=1
k

(−1)s

=n+
s=1

NH (v) .
B⊆e v∈B
|B|=s

For any subset B of e, we have that all of Q and e\B are in the common neighborhood

82
of B in H; thus
q + k − |B| ≤

NH (v) .
v∈B

On the other hand, the size of this common neighborhood is maximized when all
vertices in B have the same neighborhood; hence

NH (v) ≤ (k − 1)(∆ − 2) + k − |B|.
v∈B

Using these inequalities in (3.5.3), we have

|I| ≥ n −
s odd
k

k
s

(k − 1)(∆ − 2) + k − s +

(−1)s (k − s)

=n+
s=1

s even

k
(q + k − s)
s

k
k
k
− (k − 1)(∆ − 2)
+q
.
s
s
s
s even
s odd

Applying the binomial theorem, this becomes

|I| ≥ n − k − (∆ − 2)(k − 1) 2k−1 + q 2k−1 − 1

(3.5.4)

= n − ∆(k − 1) 2k−1 + q 2k−1 − 1 + (k − 1) 2k − 1 − 1.

Combining equations (3.5.2) and (3.5.4) yields

(k − 1)δ n − ∆(k − 1) 2k−1 + (k − 1) 2k − 1 − 1
≤ (∆ − k)q − (k − 1)δ 2k−1 − 1 q − 2k
≤ ∆q − 2k

q/2
k

(3.5.5)

qk
.
(2k)k

Without loss of generality, suppose |Q1 | ≥ |Q2 |, and let q1 = |Q1 |. Since Q1 is

83
a clique,

q1 −1
k−1

≤ ∆, so q1 ≤ c ∆1/(k−1) for some constant c depending only on k.

Then, since Q = Q1 ∪ Q2 , we have q ≤ 2q1 ≤ 2c ∆1/(k−1) = c∆1/(1−k) . Inequality
(3.5.5) now becomes

n≤

c−

ck
(2k)k−1

∆k/(k−1)
+ (k − 1)2k−1 ∆.
δ

This establishes the theorem, with c1 = c −

ck
(2k)k−1

and c2 = (k − 1)2k−1 .

When δ = o ∆1/(k−1) , the bound in Theorem 3.5.3 reduces to

n>c

∆k/(k−1)
δ

for c = c1 + c2 . We show that for δ in this range, Theorem 3.5.3 is best possible up
to the choice of c.
Fix k and δ and choose an integer x

δ such that

x−k
δ(k−1)

is an integer. Form a

complete k-graph on x vertices; set aside k of these vertices to form the set B, and
let T be the set of remaining vertices. Add an independent set I of order
(x − k) x − 1
,
ρ(k − 1)δ k − 1
where ρ > 1 is chosen such that

1 x−1
ρ k−1

each of size δ(k − 1), where r =
1 x−1
ρ k−1

is an integer. Partition T into sets T1 , . . . , Tr ,

x−k
,
δ(k−1)

and partition I into sets I1 , . . . , Ir of size

. For each vertex v ∈ Ij , create edges e1 , . . . , eδ , where each edge consists of v

and k − 1 distinct vertices of Tj . Thus, N (v) = Tj and each vertex in Tj is in exactly
one edge with each vertex of Ij . Finally, add an independent set of size x − k + |I|.

84
We now have a k-graph H where each vertex in T has degree
x−1
1 x−1
+
k−1
ρ k−1
x−1
k−1

each vertex in B has degree

=

1+

1
ρ

x−1
,
k−1

, and each vertex in I has degree δ.

Consider two orderings of the degree sequence of H:


π1 = 

π2 = 

x−1
k−1

k

x−1
k−1

k

,

1+

x−1
k−1

1
ρ

, 0x−k ,

1+

1
ρ



x−k

, 0x−k , δ |I| , 0|I| 
x−1
k−1



x−k

, 0|I| , δ |I|  .

Note that n, the length of sequences π1 and π2 , is

n = 2x − k + 2|I|
= 2x − k +

2(x − k) x − 1
ρ(k − 1)δ k − 1

= Θ(xk /δ).

In π1 +π2 the minimum degree is δ and the maximum degree is ∆ = 2

x−1
k−1

= Θ(xk−1 ).

Hence ∆ = Θ((δn)(k−1)/k ).
In any realization of π1 , Lemma 3.5.4 implies that the vertices of degree greater
than δ must form a clique. Since the k vertices of B must be in this clique, those
vertices must form an edge in any realization of π1 . The same argument applies to
π2 , hence the sequences do not pack.

85
Lemma 3.5.4 ([6]). If π = (d1 , . . . , dn ) is a k-graphic sequence, then
t

n

di ≤ k
i=1

t
+ (k − 1)
dj
k
j=t+1

for k ≤ t ≤ n. If equality holds, then the t vertices of highest degree in any krealization of π form a clique, and any edge not contained in the clique contains
exactly one vertex outside the clique.

Acknowledgements
This research was done using resources provided by the Open Science Grid, which is
supported by the National Science Foundation and the U.S. Department of Energy’s
Office of Science. In particular, the authors would like to thank Derek Weitzel of the
Holland Computing Center for his help with accessing and running our program on
the Open Science Grid.

86

Chapter 4
Induced-saturation1

1
This is chapter is the result of joint work with Catherine Erbes, Michael Santana, Derrek Yager,
and Elyse Yeager and appears in [7].

87

4.1

Background and introduction

A well known graph parameter is the saturation number, defined for a graph H and
a whole number n as the minimum number of edges in a graph G on n vertices such
that H is not a subgraph of G, but H occurs if any edge of G is added to G. Formally,

sat(n, H) = min{|E(G)| : G has n vertices, H ⊆ G, and ∀e ∈
/ E(G), H ⊆ G + e}.

Determining the saturation number for a given graph H has proven, in general,
quite difficult. For more information on the saturation number, see the dynamic
survey of Faudree, Faudree, and Schmitt [36].
A natural attempt at defining an induced variant of graph saturation would be
to state that an n-vertex graph G is H-induced-saturated if G is H-free and for all
e∈
/ E(G), G+e contains H as an induced subgraph. Unfortunately, this is not always
well defined. That is, there exist graphs H and values of n ≥ |V (H)| for which every
n-vertex graph G either contains H as induced subgraph, or there exists e ∈
/ E(G)
such that G + e is H-free. A simple example is n = 4 and H = K1,3 .
In this chapter, we consider a variant of the saturation number introduced by
Martin and Smith in 2012 that looks for induced copies of H, and considers deleting
as well as adding edges. To create a well defined parameter, Martin and Smith
[69] make use of trigraphs, objects also used by Chudnovsky and Seymour in their
structure theorems on claw-free graphs [27].
Definition 4.1.1. A trigraph T is a quadruple (V (T ), EB (T ), EW (T ), EG (T )), where
V (T ) is the vertex set and the other three elements partition

V (T )
2

into a set EB (T )

of black edges, a set EW (T ) of white edges, and a set EG (T ) of gray edges. These
can be thought of as edges, nonedges, and potential edges, respectively. For any

88
e ∈ EB (T ) ∪ EW (T ), let Te denote the trigraph where e is changed to a gray edge,
i.e. Te = (V (T ), EB (T ) − e, EW (T ) − e, EG (T ) + e).
A realization of T is a graph G = (V (G), E(G)) with V (G) = V (T ) and E(G) =
EB (T ) ∪ S for some S ⊆ EG (T ). Let R(T ) be the family of graphs that are a
realization of T .
A trigraph T is H-induced-saturated if no realization of T contains H as an induced
subgraph, but H occurs as an induced subgraph of some realization whenever any
black or white edge of T is changed to gray. Formally,

indsat(n, H) = min{|EG (T )| :|V (T )| = n, ∀G ∈ R(T ), H ≤ G,
and ∀e ∈ EB (T ) ∪ EW (T ), H ≤ G
where G ∈ R(Te )}.

The induced saturation number of a graph H with respect to n, written indsat(n, H),
is the minimum number of gray edges in an H-induced-saturated trigraph with n vertices.
Notice that a trigraph with EG (T ) = ∅ has a unique realization, so if indsat(n, H) =
0, there is a graph G that has no induced copy of H yet adding or removing any edge
creates an induced copy of H. We will call such a graph H-induced-saturated.
The complement of a trigraph T , denoted T , is the trigraph with V (T ) = V (T ),
EB (T ) = EW (T ), EW (T ) = EB (T ), and EG (T ) = EG (T ).

89

4.1.1

Notation

For graphs G and H, we let G ∪ H denote the disjoint union, G ∨ H denote the join,
and G

H denote the Cartesian product of the two graphs. A trivial component of

a graph is an isolated vertex. For a graph G, we use n(G) for the number of vertices
and e(G) for the number of edges in G. We let Pn denote the path on n vertices and
Cn the cycle on n vertices. Kn is the complete graph on n vertices, and for k ≥ 2,
+
Ka1 ,...,ak is the complete multipartite graph with parts of size a1 , . . . , ak . K1,3
is the

paw, which is obtained by adding a single edge to K1,3 . For a set S ⊆ V (G), G[S]
is the subgraph of G induced by S, and if S = {v1 , . . . , vp }, we will sometimes write
G[v1 , . . . , vp ]. For a vertex v ∈ V (G), NG (v) (or N (v), if G is clear from context) is
the set of neighbors of v in G, and N [v] = N (v) ∪ {v}. We use degG (v) or deg(v) to
denote the degree of v, that is, |N (v)|. In a trigraph, the black (resp. gray) degree
of a vertex is the number of black (resp. gray) edges incident to that vertex. We say
a set S of vertices dominates G, and we call S a dominating set, if every vertex of
G − S is adjacent to some vertex in S; if S = {v}, we say v is a dominating vertex.
Similarly, a vertex u dominates a vertex set S if u is adjacent to every vertex in S.
Finally, for an integer n, we let [n] = {1, . . . , n}. Other notation will be defined as it
is used, or see [84] for any undefined terms.

4.1.2

Observations and previous results

By definition, the only trigraphs on fewer than v(H) vertices that are H-inducedsaturated are those in which all edges are gray. Thus we will usually assume that
n ≥ |V (H)| when we discuss indsat(n, H).
The following theorem summarizes the results of Martin and Smith [69]:
Theorem 4.1.2. Let H be a graph.

90
• For all n ≥ |V (H)|, indsat(n, H) ≤ sat(n, H). By [54], sat(n, H) ∈ O(n), so in
particular indsat(n, H) ∈ O(n).
• For all n ≥ m ≥ 3, indsat(n, Km ) = sat(n, Km ). (Note that sat(n, Km ) was
determined by Erd˝os, Hajnal, and Moon in [34].)
• For all n ≥ m ≥ 2, and for e ∈ E(Km ), indsat(n, Km − e) = 0. In particular,
for all n ≥ 3, indsat(n, P3 ) = 0.
• For all n ≥ 4, indsat(n, P4 ) =

n+1
3

.

We also make the following observation:
Observation. A trigraph T is H-induced-saturated if and only if T is H-inducedsaturated. In particular, indsat(n, H) = indsat(n, H).
Proof. Suppose a trigraph T has a realization G such that H is an induced subgraph
of G. Then H is an induced subgraph of G. Using the definition of T , G is a
realization of T . It follows that a trigraph T is H-induced-saturated if and only if T
is H-induced-saturated.

4.1.3

Minimally H-induced-saturated graphs

In this chapter we show that indsat(n, H) is zero for stars, which as noted above,
means that there exists a graph that is H-induced-saturated. This leads to the
natural question: What is the minimum number of edges in such a graph?
Definition 4.1.3. For a graph H and whole number n with indsat(n, H) = 0, we
define

indsat∗ (n, H) := min{e(G) : |V (G)| = n and G is H-induced-saturated}.

91
We say a graph G on n vertices with indsat∗ (n, H) edges is minimally H-inducedsaturated.
By Observation 4.1.2, the maximum number of edges in an n-vertex H-inducedsaturated graph is

n
2

− indsat∗ (n, H).

In this chapter we show that stars (K1,t ) have induced-saturation number zero for
n sufficiently large. We also determine indsat∗ (n, K1,t ) within a factor of 2 and show
that the upper bound is correct for K1,3 . Finally, we introduce the induced-saturation
number of a family of graphs and show that while every graph in a family may
have induced-saturation number zero, the family itself could have nonzero inducedsaturation number. In further joint work [7], we show that the following graphs have
+
induced-saturation number zero for n sufficiently large: K1,3
, stars , C4 , odd cycles,

some modifications of even cycles, and matchings. Additionally, we provide bounds
+
on indsat∗ (n, H) for the graphs listed above. In particular, we characterize the K1,3
+
induced-saturated graphs, which in turn completely determines indsat∗ (n, K1,3
).

4.2

Stars

Recall that K1,2 = P3 , and indsat(n, P3 ) = 0 for n ≥ 3, as established in [69]. In
this section we provide a construction extending this result, to show that for fixed
k ≥ 2 and n sufficiently large, indsat(n, K1,k+1 ) = 0. Additionally, our construction,
together with a simple argument, determines indsat∗ (n, K1,k+1 ) within a factor of two.
The case when k = 2, which refers to the graph K1,3 , commonly known as the claw,
will be addressed in further detail in Section 4.3.
Construction 4.2.1. Fix k ≥ 2 and n ≥ 3k . Let z, R be positive integers such that
n = z3k + R with 0 ≤ R < 3k . Let H be the graph K31

K32

···

K3k , where K3i

92
denotes a single copy of K3 . In other words, V (H) = {(α1 , . . . , αk ) : αi ∈ [3]}, and
(α1 , . . . , αk )(β1 , . . . , βk ) ∈ E(H) if and only if

|{i : αi = βi }| = 1. Define H where

V (H ) is the disjoint union of V (H) and V (KR ), and E(H ) consists of E(H), E(KR )
and the edges between H and KR satisfy: for each v ∈ V (KR ), vα ∈ E(H ) if and
only if α = (α1 , 1, 1, . . . , 1), α1 ∈ [3]. We now define G to be the disjoint union of
z − 1 copies of H and a single copy of H .
Proposition 4.2.2. The graphs in Construction 4.2.1 are K1,k+1 -induced-saturated.
Proof. Given fixed n and k, let G and R be as defined in Construction 4.2.1. Let F
denote the subgraph of H isomorphic to H. Suppose that G contains an induced
K1,k+1 with center x, and suppose first that x is in a copy of H. Since V (G) can
be represented by k-dimensional vectors as described in the construction, any set of
k + 1 neighbors of x contains two vertices with vectors that differ in exactly one
coordinate. Thus, x cannot have k + 1 neighbors which form an independent set, and
H is K1,k+1 -free.
If H contains an induced K1,k+1 , then x cannot be in the KR as the neighborhood
of x would be a clique. Thus, x is in F . If this induced K1,k+1 contains no vertices
from the copy of KR , then the above argument produces a contradiction. Thus, this
K1,k+1 contains a vertex from the copy of KR , and without loss of generality, we
may assume that x is represented by (1, 1, . . . , 1) in F . Consequently, our K1,k+1 has
exactly one vertex in KR , but then contains no vertices of the form (α1 , 1, 1, . . . , 1)
other than x. Hence, x has at most k − 1 other neighbors from F in this copy of
K1,k+1 from F . So G is K1,k+1 -free.
It is clear that every vertex in a copy of H (or in F ) is the center of an induced
K1,k . Thus, if we add an edge between two components of G, one component must be
a copy of H, and we obtain an induced K1,k+1 . Thus, it remains to consider adding an

93
edge within a component. Note that by the construction of H , the only possible way
to add an edge is within F , which is isomorphic to H. So, it suffices to consider adding
an edge to a copy of H. Suppose we add the edge uv. Without loss of generality, we
may assume that u is represented by (1, 1, . . . , 1). Since u and v were not adjacent
in H, their corresponding vectors must differ in at least two coordinates, say the
first and second. As a consequence, v is adjacent to neither y nor w, where y ∈
{(2, 1, 1, . . . , 1), (3, 1, 1, . . . , 1)} and w ∈ {(1, 2, 1, 1, . . . , 1), (1, 3, 1, 1, . . . , 1)}. Thus,
{u, v, w, y} is an induced K1,3 centered at u. To this set we add vertices α3 , α4 , . . . , αk ,
where αi has all coordinates equal to 1 except that the ith coordinate is either 2 or
3. This induces K1,k+1 .
Lastly, suppose we remove an edge uv. There are three cases to consider. The
first case is if uv is in a copy of H (or in F ). Here, we may assume u = (2, 1, 1, . . . , 1)
and v = (3, 1, 1, . . . , 1). The second case is if both u and v are in KR . The last
case is if only one endpoint, say v, is in KR . Here, we may again assume that
u = (2, 1, 1, . . . , 1). In all three cases, (1, 1, . . . , 1) together with u, v, and the vertices
α2 , . . . , αk defined above induce a K1,k+1 . This completes the lemma.
Corollary 4.2.3. For fixed k ≥ 2 and n ≥ 3k , indsat(n, K1,k+1 ) = 0.
Theorem 4.2.4. For n ≥ 2 · 3k and k ≥ 2, there exist constants c1 = c1 (k) and
c2 = c2 (k) such that n k2 − c1 ≤ indsat∗ (n, K1,k+1 ) ≤ nk + c2 .
Proof. Given fixed n and k, let G and R be as defined in Construction 4.2.1.
We establish e(G) by considering vertex degrees. The component H has at most
2 · 3k vertices, and so (trivially) at most

2·3k
2

edges. The remaining vertices, of which

there are at most n − 3k , all have degree 2k for a contribution of at most (n − 3k )k
edges. All told, e(G) ≤ nk − k · 3k +

2·3k
2

.

94
To show the lower bound, suppose that G is a K1,k+1 -induced-saturated graph.
Let S = {x ∈ V (G) : deg(x) ≤ k − 1}. We claim that |S| ≤ k.
If |S| > k, then there exist x, y ∈ S such that xy ∈
/ E(G). Let G denote G + xy.
As G was K1,k+1 -induced-saturated, G must contain an induced K1,k+1 , using the
edge xy with either x or y as the center of this K1,k+1 . However, as both x and y are
adjacent to at most k − 1 vertices in G, this cannot happen. So |S| ≤ k, as claimed.
Observe:



e(G) ≥



nk k 2
1
deg(x) ≥
− .
k(n − |S|) +
2
2
2
x∈S

This establishes the lower bound.
It is worth noting that we can extend Construction 4.2.1, as any graph formed as
a Cartesian product of exactly k cliques, each of size at least three, is K1,k+1 -inducedsaturated.

4.3

The claw

For sufficiently large n, Theorem 4.2.4 states that indsat∗ (n, K1,k+1 ) is linear in n,
and in particular, we know the coefficient within a factor of two. In this section,
we will determine the coefficient of indsat∗ (n, K1,3 ), which coincides with the upper
bound given in Theorem 4.2.4. Additionally, we will provide better constructions than
that in Construction 4.2.1, which will ultimately determine indsat∗ (n, K1,3 ) within an
additive constant of four.
Values of indsat(n, K1,3 ) were determined for 4 ≤ n ≤ 10 by computer search2
and are listed in Table 4.1, along with trigraphs that achieve the minimum number
2
A program was written in C++ and is available at http://www.math.unl.edu/~s-sbehren7/
main/Data.html.

95
of gray edges. This, together with Corollary 4.2.3 determines indsat(n, K1,3 ) for all
n. We now turn our attention to indsat∗ (n, K1,3 ).
indsat(4, K1,3 ) =
3
indsat(5, K1,3 ) =
3

indsat(10, K1,3 ) = 0

indsat(6, K1,3 ) =
3
indsat(7, K1,3 ) =
2
indsat(8, K1,3 ) =
2
indsat(9, K1,3 ) =
0

Table 4.1: Values of indsat(n, K1,3 ) for 4 ≤ n ≤ 10 along with trigraphs realizing
those values. All K1,3 -induced-saturated graphs for n = 9 and n = 10 are shown.

Theorem 4.3.1. The following bounds hold for n ≥ 9, n = 14, 17:
indsat∗ (n, K1,3 ) = 2n

if n ≡ 0 mod 3

indsat∗ (n, K1,3 ) = 2n − 2

if n ≡ 1 mod 3

2n ≤ indsat∗ (n, K1,3 ) ≤ 2n + 2

if n ≡ 2 mod 3.

In order to prove Theorem 4.3.1, we first prove a series of lemmas that will aid
in producing the lower bounds of the statement. Then we construct families of K1,3 induced-saturated graphs that exhibit the upper bounds of Theorem 4.3.1.
The following lemma shows that K1,3 -induced-saturated graphs have few vertices
of low degree.
Lemma 4.3.2. Let G be a K1,3 -induced-saturated graph. Then G has

96
1. at most one isolated vertex,
2. no vertices of degree one,
3. at most one vertex of degree two, and
4. at most two vertices of degree three.
Furthermore, if G has an isolated vertex v, then δ(G − v) ≥ 4. Additionally, if G
has a vertex of degree three, then G does not have a vertex of degree two. If G has
two vertices of degree three or a vertex of degree two, then G has a vertex of degree
at least five.
Proof. Let G be a K1,3 -induced-saturated graph. Observe that if we had two isolated
vertices, then adding the edge between them would not yield a K1,3 . Also, any edge
of G lies in a triangle, so there are no vertices of degree one.
Suppose that u and v are vertices of degree two. Since every edge lies in a triangle
the neighbors of u are adjacent, as are the neighbors of v. Thus, if u and v are not
adjacent, adding the edge uv does not create an induced K1,3 . If u and v are adjacent,
then N [u] = N [v] = {u, v, w} for some w. However, removing uw does not create an
induced K1,3 as v would have to have been its center. So G has at most one vertex
of degree two.
To prove (4), suppose u is a vertex of degree three with neighbors u1 , u2 , u3 .
Since every edge is in a triangle, we may assume that u1 u2 , u2 u3 ∈ E(G). Case 1:
u1 u3 ∈
/ E(G). Then adding u1 u3 creates an induced K1,3 centered at either u1 or u3 ;
say u1 . Then u1 has two nonadjacent neighbors x and y that are distinct from u2 and
u3 . However, {u, u1 , x, y} induces a K1,3 in G, a contradiction. Case 2: u1 u3 ∈ E(G).
In particular, every vertex of degree three in G is contained in a K4 . Let v be another
vertex of degree three. By the above, N [v] induces K4 . If uv ∈
/ E(G), then adding

97
uv does not create an induced K1,3 . Thus, u and v are adjacent, and consequently
the only vertices of degree three are contained in N [u].
If we remove uu1 , then an induced K1,3 exists, centered at either u2 or u3 . So at
least one of them has degree at least four, say u3 . Similarly, removing uu3 creates
an induced K1,3 centered at either u1 or u2 so that at least one of them has degree
at least four. In any case, at most two vertices in N [u], and as a result in G, have
degree three. Thus, (4) holds.
If G has an isolate, u, and another vertex v with deg(v) ≤ 2, then adding uv
cannot create an induced K1,3 unless deg(v) = 2. In this case, the neighbors of v
cannot be adjacent, however every edge of G must be in a triangle, a contradiction.
Suppose u and v are vertices with deg(u) = 2 and deg(v) = 3. By previous
arguments, the neighbors of u form a clique, as do the neighbors of v. Thus, if
uv ∈
/ E(G), adding uv does not create an induced K1,3 . So uv ∈ E(G), and in
particular, u is in the K4 induced by N [v]. However, deg(u) = 2, a contradiction.
Now, suppose u and v are vertices with deg(u) = deg(v) = 3. By the above, they
must be contained in the same K4 , so let u, v, x, y denote the vertices of this K4 . If
we delete xy, then x and y are the leaves of a K1,3 , but this K1,3 is not centered at u
or v, so x and y have a common neighbor z ∈ {u, v}. If we delete xz, the resulting
K1,3 is centered at a common neighbor of x and z. If that common neighbor is not
y, then deg(x) ≥ 5, and if it is, then deg(y) ≥ 5.
Similarly, suppose deg(v) = 2, with N (v) = {x, y}. Since every edge is in a
triangle, xy ∈ E(G). If we consider deleting the edge xy, we note that the K1,3
formed does not have center v, so x and y share another neighbor z, and z has a
neighbor z nonadjacent to both x and y. Consider deleting the edge vx. The K1,3
formed must be centered at y, so y has a neighbor nonadjacent to v or x. Then this
neighbor y is not any of the vertices already named. Similarly, x has a neighbor

98
x ∈ {v, x, y, y , z, z }. Then {x , y } ⊆ N (z) else G[x, x , v, z] or G[y, y , v, z] is a K1,3 .
Thus, deg(z) ≥ 5.
Corollary 4.3.3. Any graph that is K1,3 -induced-saturated (on n ≥ 9 vertices) has at
least 2n−2 edges. That is, indsat∗ (n, K1,3 ) ≥ 2n−2 for n ≥ 9. Furthermore, if G is a
K1,3 -induced-saturated graph that does not have an isolated vertex, then |E(G)| ≥ 2n.
Proof. Apply the degree-sum formula and Lemma 4.3.2.
As indicated in Corollary 4.3.3, if a graph on n vertices obtaining the minumum
number of edges among K1,3 -induced-saturated graphs exists, then it is four-regular
except for an isolated vertex. We provide the following structural results to show
such a graph only exists if n ≡ 1 mod 3.
Lemma 4.3.4. Suppose G is a K1,3 -induced-saturated graph, and for some v ∈ V (G),
every vertex in N [v] has degree precisely 4. Then G[N (v)] ∈ {2K2 , P4 }.
Proof. Since we are assuming every vertex in N [v] has degree 4, then we can let
N (v) = {u, x1 , x2 , x3 }. Next, we show that ∆(G[N (v)]) ≤ 2. Suppose to the contrary
that some vertex, say u ∈ N (v), has three neighbors within N (v); hence, N (u) ∩
N (v) = {x1 , x2 , x3 }. By deleting ux1 , we see that u and x1 have a common neighbor
besides v. Using the symmetry of x1 , x2 , and x3 , without loss of generality x1 x2 , x2 x3 ∈
E(G). Now N (x2 ) = {u, v, x1 , x3 }, because deg(x2 ) = 4. Consider deleting ux1 . The
common neighbors of u and x1 are v, x2 , and maybe x3 . Neither v nor x2 can be the
center of a K1,3 since all of their neighbors are adjacent to u or x1 . Hence x3 must be
the center of the induced K1,3 , so x1 x3 ∈ E(G). But then N (x3 ) = {v, u, x1 , x2 } so
the K1,3 supposedly centered at x3 has no third leaf.

99
This shows that ∆(G[N (v)]) ≤ 2. Because every edge is in a triangle, if ∆(G[N (v)]) <
2, then G[N (v)] = 2K2 , so suppose ∆(G[N (v)]) = 2. Then G[N (v)] is either C4 or
P4 .
Suppose x1 x2 x3 x4 = P4 ⊆ G[N (v)]. If x1 x4 ∈ E(G), then G[N (v)] = P4 , so
suppose x1 x4 ∈ E(G). Deleting the edge x2 x3 shows that x2 and x3 have a common
neighbor y ∈ V (G) \ N [v]. Separately, consider deleting x3 x4 . The only possible
common neighbors of x3 and x4 are v and y. Because x1 x4 ∈ E(G), v cannot be the
center of the K1,3 created by deleting x3 x4 , so the center is y. Then the third leaf
must be some vertex y ∈ N (x3 ) ∪ N (x4 ). But we also know that y ∈ N (x2 ), since
deg(x2 ) = 4, so G[y, y , x2 , x4 ] is an induced K1,3 , a contradiction.
For the remainder of this section, we define R(G) := {v ∈ V (G) : G[N (v)] = 2K2 }
and B(G) := {v ∈ V (G) : G[N (v)] = P4 } for any graph G. Hence if G is a fourregular K1,3 -induced-saturated graph, then V (G) is partitioned into R(G) and B(G).
We will call the vertices in R(G) red vertices and those in B(G) blue vertices.
Lemma 4.3.5. If G is a 4-regular K1,3 -induced-saturated graph, then B(G) induces
kK3 for some k.
Proof. Let v ∈ B(G) so that G[N (v)] is a path x1 x2 x3 x4 . Since P3 ⊆ G[{v, x1 , x3 }] ⊆
G[N (x2 )] and P3 ⊆ G[{v, x2 , x4 }] ⊆ G[N (x3 )], Lemma 4.3.4 implies that x2 , x3 ∈
B(G). Furthermore, as deleting x2 x3 creates an induced K1,3 , which cannot be
centered at v, then x2 and x3 share another common neighbor, call it y. Since
N (x2 ) = {v, x1 , x3 , y}, x1 ∈ B(G) if and only if x1 and y are neighbors. So if
x1 y ∈ E(G), we consider adding vy to G. This creates an induced K1,3 , which
must be centered at y. However, since G is 4-regular, y has at most one neighbor
outside of {x2 , x3 , x4 , v} and cannot be the center of this induced K1,3 , a contradiction. Thus, x1 ∈ R(G), and by symmetry, x4 ∈ R(G). Repeating the above

100
argument for x2 instead of v shows that y ∈ R(G). Hence, {x2 , x3 , v} ⊆ B(G) but
N ({x2 , x3 , v}) = {x1 , x4 , y} ⊆ R(G) and so {x2 , x3 , v} induces a triangle of vertices
in B(G).
An example of a 4-regular K1,3 -induced-saturated graph, with R(G), B(G) = ∅ is
shown in Figure 4.1. Observe that B(G) induces 8K3 , which is in accordance with
Lemma 4.3.5.

Figure 4.1: A 4-regular K1,3 -induced-saturated graph. Vertices in R(G) are white,
and vertices in B(G) are gray.

Lemma 4.3.6. Let G be a 4-regular K1,3 -induced-saturated graph. Every edge of G
is in either one or two triangles, and there are |B(G)| edges that are in two triangles.
Proof. Recall that every edge in a K1,3 -induced-saturated graph is in at least one
triangle. Suppose there exists xy ∈ E(G) where x and y have three common neighbors
u, v, w. Then G[N (x)] cannot be in {2K2 , P4 }, which contradicts Lemma 4.3.4. Hence,
each edge is in at most two triangles.

101
Let b be the number of edges that are in two triangles. Label edge xy with vertex
z if xyz is a triangle, and allow for multiple labels. Thus b edges have two labels and
hence
|E(G)| + b =

|{e ∈ E(G) : e has label z}|.
z∈V (G)

Since each red vertex gives its label to two triangles and each blue vertex gives its label
to three triangles, we have

z∈V (G)

|{e ∈ E(G) : e has label z}| = 2|R(G)|+3|B(G)|.

Thus, since G is 4-regular,

2n + b = |E(G)| + b
|{e ∈ E(G) : e has label z}|

=
z∈V (G)

= 2|R(G)| + 3|B(G)|
= 2(n − |B(G)|) + 3|B(G)|
= 2n + |B(G)|

Therefore, there are precisely |B(G)| edges that are in two triangles.
Proposition 4.3.7. If G is a 4-regular, K1,3 -induced-saturated graph on n vertices,
then n ≡ 0 mod 3.
Proof. Let b = |B(G)|. By Lemma 4.3.5, 3 divides b. By Lemma 4.3.6, 2n − b edges
are in precisely one triangle, and b edges are in precisely two triangles. If t is the
number of triangles in G, then 3t = (2n − b) + (2b) = 2n + b. Since 3 divides b, we
know 3 divides 2n, and so 3 divides n.

102
The previous lemmas will be used in the proof of Theorem 4.3.1 to obtain a lower
bound indsat∗ (n, K1,3 ) ≥ 2n − 1 for n ≡ 0 mod 3. The next two propositions show
that certain degree sequences do not have a K1,3 -induced-saturated realization. This
allows us to increase the lower bound of indsat∗ (n, K1,3 ) for certain values of n.
Proposition 4.3.8. If G is a K1,3 -induced-saturated graph, then the degree sequence
of G is not (5, 5, 4, . . . , 4).
Proof. Suppose G is a counterexample to the claim, and let v be a vertex of degree
5.
Case 4.3.8.1. ∆(G[N (v)]) = 4.
That is, v has a neighbor u such that X := N (u) ∩ N (v)is a set of order 4. If
we delete vx for some x ∈ X, then the resulting K1,3 is not centered at u since the
neighbors of u are adjacent to v. Thus x and v share a neighbor x ∈ X and there is
some ∈ N (x) \ [N (x ) ∪ N (v)]. Now N (x) = {u, v, x , y} and uy, vy, x y ∈
/ E(G), so
the edge xy is in no triangle, a contradiction.
Case 4.3.8.2. ∆(G[N (v)]) = 3.
That is, there exist u ∈ N (v), w ∈
/ N [u], and X ⊆ N (u) with |X| = 3 so that
N (v) = {u, w} ∪ X. Since deleting the edge vw creates a K1,3 , there exist vertices x
and y such that x is a common neighbor of v and w, y is adjacent to x , and y is not
adjacent to w nor v. Note x ∈ X and y ∈
/ N [v]. Then to prevent a K1,3 in G with
center x and leaves u, w, y, we have uy ∈ E(G). Then, u, v are the vertices of degree
5 and all other vertices have degree 4 so that N (x ) = {u, v, y, w}. Since u is not the
center of a K1,3 , and x has no neighbors in X, the vertices of X \ {x} (call them a
and b) are adjacent.
Note that u was chosen as an arbitrary vertex of N (v) with three neighbors in
N (v), and we showed deg(u) = 5.

103
Now, deg(a) = deg(b) = 4 and each of a and b currently has two neighbors
in N (v). If a (or b) were adjacent to w, then the argument previously applied to
u would guarantee that deg(a) = 5 (or deg(b) = 5), thus giving us at least three
vertices of degree 5. Therefore a and b each have a neighbor outside of N [v]; due to
the necessity that every edge be in a triangle, they share this neighbor, which we shall
name z. It is possible that z = y. Suppose z = y, then deleting az should create an
induced K1,3 centered at at common neighbor of a and z. However, the only option
is b, which is not the center of such a K1,3 , a contradiction. So suppose z = y, then
degN (u) (a) = 3. By the previous argument with u, we must have degG (a) = 5, a
contradiction.
Case 4.3.8.3. ∆(G[N (v)]) ≤ 2.
N (v) has no independent set of size three, lest it be the center of a K1,3 . Then
G[N (v)] ∈ {K2 + K3 , C5 }.
Suppose first G[N (v)] = K2 + K3 , with {x1 , x2 , x3 } inducing K3 . We may suppose
deg(x1 ) = deg(x2 ) = 4 since at most one of the vertices in the copy of K3 may
have degree 5. So each of x1 and x2 have a neighbor outside of N [v], say y and z,
respectively. If y = z, then since every edge is contained in a triangle, x3 is adjacent
to both y and z. However, this implies that deg(z) = 5 and ∆(G[N (z)]) ≥ 3, as
evidenced by x1 . This puts us in Case 4.3.8.2.
So y = z, and consequently, N [x1 ] = N [x2 ]. The only common neighbors of x1
and y are x2 and possibly x3 . If x3 ∈
/ N (x) ∩ N (y), removing x1 y should create an
induced K1,3 centered at x2 , but it does not. Thus, removing x1 y creates an induced
K1,3 centered at x3 , which implies that x3 is adjacent to y, as well as another vertex
y not in N [v] ∪ {y}. However, this implies that deg(x3 ) = 5, and ∆(G[N (x3 )]) ≥ 3,
as evidenced by x1 . This also puts us in Case 4.3.8.2.

104
Suppose now G[N (v)] = C5 with cycle x1 x2 x3 x4 x5 . We may assume that x1 , x2 , x3 ,
and x4 all have degree 4. The only common neighbors of v and x2 are x1 and x3 .
When removing vx2 we obtain an induced claw centered at either x1 or x3 . Without
loss of generality, assume it is x3 . Since x4 is not a leaf of a K1,3 that features v as a
leaf, x3 has a neighbor y ∈ N (v) ∪ N (x2 ). Since G[x3 , x2 , x4 , y] cannot be a K1,3 , we
must have yx4 ∈ E(G). Similarly, if we delete vx3 , the candidates for center of the
ensuing K1,3 are x2 and x4 ; we know the neighborhood of x4 , and so see that x2 is
the center. Then there exists y ∈ N (x2 ) such that y ∈ N (v) ∪ N (x3 ), and as before
y x1 ∈ E(G). Now we know the neighborhoods of x1 , x2 , x3 , and x4 . If we add the
edge x1 x4 , we find that no K1,3 is formed, a contradiction.
Proposition 4.3.9. Let G be a K1,3 -induced-saturated graph. Then for any n ≥ 7,
the degree sequence of G is not (6, 4, . . . , 4).
Proof. Suppose G is a counterexample to this claim. Let v have degree six, and
let F = G[N (v)], so |F | = 6, ∆(F ) ≤ 3, and α(F ) ≤ 2 else v is the center of a
K1,3 . In fact α(F ) = 2 in order for the vertices of N (v) to have degree four in G.
If δ(F ) = 3, then N [v] is a component of G, and this component is K1,3 -inducedsaturated. However, from the computer search, with results listed in Table 4.1, we
know that there is no nontrivial K1,3 -induced-saturated graph on fewer than nine
vertices. Therefore δ(F ) ≤ 2. Indeed, we claim δ(F ) = 2. If δ(F ) ≤ 1, let u be a
vertex with minimum F -degree (i.e. degF (u) is minimum), and let T = F \ N [u].
Then T is a clique, else two nonadjacent vertices in T together with u and v form a
K1,3 . Hence |T | = 4 and the vertices of T have no neighbors outside of N [v] in G.
Now, deleting the edge between v and any vertex of T does not create an induced
K1,3 , so δ(F ) = 2.
Let u be a vertex in F with degF (u) = 2, and let T = F \ N [u]. As before, T

105
is a clique, specifically a triangle. Let NF (u) = {u , u }. Since degF (u) = 2, u has
one neighbor w outside of N [v]; since every edge is in a triangle, we may assume
that w is adjacent to u . Now, the only common neighbors of v and u are in NF (u).
Since δ(F ) = 2, u must have another neighbor in F other than u. Thus, the only
neighbor of u not in N [v] is w, and if we delete vu, the resulting induced K1,3 cannot
be centered at u . So it must be centered at u , which in turn has a neighbor w
outside of N [v] ∪ {w}. Since u w is in a triangle and δ(F ) = 2, u and w share a
neighbor t in F . Since δ(F ) = 2, no vertex in F has two neighbors outside N [v]. So
t = u , and hence t ∈ T . But now deg(t ) ≥ 5, a contradiction.
Finally, we construct graphs which we use to find an upper bound for indsat∗ (n, K1,3 ).
Lemma 4.3.10. If G is a graph where the neighborhood of every vertex induces 2K2 ,
then G is K1,3 -induced-saturated.
Proof. Since no vertex has three independent neighbors, G contains no induced K1,3 .
Suppose we delete an edge xy. Since every edge is in a triangle, say xyz, deleting xy
leaves z as the center of a K1,3 with leaves x, y, and any other neighbor of z. If we
add an edge between two vertices with no common neighbors, then we take the new
edge together with two nonadjacent neighbors of one of the vertices and find a K1,3 .
Therefore it suffices to consider adding an edge xy, where x and y share a neighbor.
Let N (x) = {u1 , u2 , v1 , v2 } with u1 u2 , v1 v2 ∈ E(G), and suppose u1 ∈ N (y). Then
u2 ∈
/ N (y) otherwise N (u2 ) would contain a P3 and not be 2K2 . Similarly, both v1
and v2 cannot be in N (y). So we may assume v2 ∈
/ N (y). Then upon adding xy,
{x, y, u2 , v2 } induces a K1,3 .
Lemma 4.3.11. Let G be a graph with at most one isolated vertex, where each nontrivial component is one of the graphs in Figure 4.2. Then G is K1,3 -induced-saturated.

106

(a) H = K3

K3 , 9 vertices

(c) Graph K on 12 vertices

(b) Graph J on 11 vertices

(d) Graph L on 15 vertices

Figure 4.2: These graphs are K1,3 -induced-saturated.
Proof. By inspection, the graph in Figure 4.2b is K1,3 -induced-saturated, and since
the graphs in Figures 4.2a, 4.2c, and 4.2d have the property that the neighborhood
of every vertex induces 2K2 , they are K1,3 -induced-saturated by Lemma 4.3.10.
Now let G be a graph with at most one isolated vertex and each of the remaining
components are one of the graphs from Figure 4.2. Since each nontrivial component
of G is K1,3 -induced-saturated, we only need to consider adding an edge xy between
components. When we add the edge xy, at least one of x and y must be in a nontrivial
component, say x. By inspection we see every vertex in every graph of Figure 4.2 has
two nonadjacent neighbors, and in particular, this holds for x. Thus, x together with
these two neighbors and y induce a K1,3 . Therefore, G is K1,3 -induced-saturated.
We now can prove Theorem 4.3.1.

107
Proof of Theorem 4.3.1. We exhibit graphs with the desired number of edges to prove
the upper bounds.
Case 4.3.11.1. n ≡ 0 mod 3, n ≥ 9
Use n/9 − 1 copies of H, together with one copy of H, K, or L, for a graph
with 2n edges. Alternatively, we could generalize L for n ≥ 15 by having n/3 vertices
in the outer cycle, n/3 vertices in the inner cycle, and n/3 vertices between the two
cycles.
Case 4.3.11.2. n ≡ 1 mod 3, n ≥ 10
Use an isolated vertex with a graph from Case 4.3.11.1 for a graph with 2n − 2
edges.
Case 4.3.11.3. n ≡ 2 mod 3, n ≥ 20 or n = 11.
If n = 11, the graph J suffices. If n ≥ 20, then take J and a construction from
Case 4.3.11.1. This achieves 2n + 2 edges.
For the lower bound, let G be any K1,3 -induced-saturated graph. Corollary 4.3.3
gives us a general lower bound of 2n − 2. Suppose G has no isolated vertex. Then by
Corollary 4.3.3, e(G) ≥ 2n, as desired. Suppose then that G does have an isolated
vertex, and n ≡ 1 mod 3. Then (n − 1) ≡ 0 mod 3, so by Lemmas 4.3.2 and
4.3.7, the minimum degree of the non-isolated vertices is at least 4, and ∆(G) ≥ 5.
Then e(G) ≥

4(n−1)+1
2

= 2n − 1, with equality only if the degree sequence of G is

(5, 5, 4, . . . , 4, 0) or (6, 4, . . . , 4, 0). Since the graph obtained by deleting the isolate is
K1,3 -induced-saturated, by Propositions 4.3.8 and 4.3.9, e(G) ≥ 2n.

108

4.4

Families of graphs

In this section we extend the definition of induced saturation to families of graphs in
the natural way.
Definition 4.4.1. For a family F of graphs, a trigraph T is F-induced-saturated if no
realization of T contains any member of F as an induced subgraph, but whenever any
black or white edge of T is turned to gray, some member of F occurs as an induced
subgraph of some realization.
The induced saturation number of F with respect to n, written indsat(n, F), is the
minimum number of gray edges in an F-induced-saturated trigraph with n vertices.
For any family F containing all graphs on k vertices, indsat(n, F) =

n
2

.

Construction 4.4.2 and Proposition 4.4.3 demonstrate that for any family F, all
of whose elements are odd cycles, even cycles with a pendant, or even cycles with
a triangle chord, indsat(n, F) = 0 for n sufficiently large. However, we could have
indsat(n, F) = 0 even if there is some G ∈ F such that indsat(n, G) = 0 as demonstrated in Proposition 4.4.4 below. One may suspect this is because of the presence of
P4 , which has nonzero induced-saturation number, yet it is also possible for a family
F to consist of graphs that each individually have induced saturation number zero,
while the induced saturation number of F is nonzero. We provide an example of this
in Proposition 4.4.5.
Construction 4.4.2 ([7]). For k ≥ 3 and n ≥ (k + 1)2 + 2, let n = (k + 1)t − s,
where t =

n
k+1

product Kk+1

≥ k + 2 and 0 ≤ s ≤ t − 3. Let Gn,k be formed from the Cartesian
Kt by removing s vertices from one copy of Kt .

Proposition 4.4.3 ([7]). Let C2k denote a cycle of length 2k with a pendant vertex,
and Cˆ2k denote an even cycle with a chord between two vertices at distance 2 from

109
each other. If H ∈ {C2k−1 , C2k , Cˆ2k }, then the graph Gn,k in Construction 4.4.2 is
H-induced-saturated.
Proposition 4.4.4. For all n, indsat(n, {2K2 , P4 , C4 }) = 0.
Proof. The graphs that contain no induced 2K2 , P4 , or C4 are precisely the threshold
graphs [28]. These graphs are characterized in a second way: they are constructed
by iteratively adding a vertex to a graph either as an isolate or a dominating vertex.
Thus, an n-vertex threshold graph can be represented as a string of n symbols from
{−, +} as follows: on the vertex set V = {v1 , . . . , vn }, for every i > j, vi vj is an edge
if and only if the ith symbol in the string is +.
We claim that for any threshold graph G with at least one edge, there exists
e ∈ E(G) such that G − e is also threshold. Let π = s1 , . . . , sn be a string of symbols
from {−, +} representing G. Suppose there exists i ∈ [n − 1] such that si = − and
si+1 = +, and let i be minimal with this property. Then the graph G = G − vi vi+1
is represented by the symbol list π = s1 . . . si−1 si+1 si si+1 . . . sn , so G is threshold.
If no such index i exists, then π is a list consisting only of +, so G is the complete
graph Kn ; however, Kn − e is also threshold.
Thus, for any graph G with no induced 2K2 , P4 , or C4 , there exists an edge e ∈ G
such that G−e also has no induced 2K2 , P4 , or C4 . It follows that indsat(n, {2K2 , P4 , C4 }) =
0.
The family of split graphs is another family of graphs that can be characterized
by a set of forbidden induced subgraphs. A split graph is a graph whose vertex set
can be partitioned into a clique and an independent set. F¨oldes and Hammer [38]
showed that a graph is a split graph if and only if it contains no induced 2K2 , C4 , or
C5 .

110
Proposition 4.4.5. For all n, indsat(n, {2K2 , C4 , C5 }) = 0.
Proof. Since adding or deleting an edge between the clique part and the independent
set of a split graph still results in a split graph, it follows that indsat(n, {2K2 , C4 , C5 }) =
0.
We have shown that indsat(n, 2K2 ), indsat(n, C4 ), and indsat(n, C5 ) are all equal
to zero for sufficiently large n. Thus, this example shows that even though every
graph in a family has induced-saturation number zero, the family itself may not have
induced-saturation number zero.
Other families characterized by a (not necessarily finite) family of forbidden induced subgraphs include perfect graphs [26], trivially perfect graphs [85], [42], interval
graphs [62], and line graphs [8]. It would be interesting to determine indsat(n, F)
and indsat∗ (n, F) for these families. We suspect that doing so will be much more
difficult than for threshold and split graphs, as the families of forbidden graphs are
significantly more complicated.

111

Bibliography
[1] Nirmala Achuthan, Narasimaha R. Achuthan, and Mudin Simanihuruk. On 3uniform hypergraphic sequences. J. Combin. Math. Combin. Comput., 14:3–13,
1993.
[2] Martin Aigner and Eberhard Triesch. Realizability and uniqueness in graphs.
Discrete Math., 136(1-3):3–20, 1994. Trends in discrete mathematics.
[3] Kenneth Appel, Wolfgang Haken, and John Koch. Every planar map is four
colorable. II. Reducibility. Illinois J. Math., 21(3):491–567, 1977.
[4] Kannan Balakrishnan, Boˇstjan Breˇsar, Manoj Changat, Sandi Klavˇzar, Iztok
Peterin, and Ajitha R. Subhamathi. Almost self-centered median and chordal
graphs. Taiwanese J. Math., 16(5):1911–1922, 2012.
[5] Michael Barrus, Stephen G. Hartke, Kyle Jao, and Douglas West. Length thresholds for graphic lists given fixed largest and smallest entries and bounded gaps.
Discrete Math., 312(9):1494–1501, 2012.
[6] Sarah Behrens, Catherine Erbes, Michael Ferrara, Stephen G. Hartke, Benjamin
Reiniger, Hannah Spinoza, and Charles Tomlinson. New results on degree sequences of uniform hypergraphs. Electron. J. Combin., 20(4):Paper 14, 18, 2013.

112
[7] Sarah Behrens, Catherine Erbes, Michael Santana, Derrek Yager, and Elyse
Yeager. Graphs with induced-saturation number zero. ArXiv e-prints, March
2015.
[8] Lowell W. Beineke. Characterizations of derived graphs. J. Combinatorial Theory, 9:129–135, 1970.
[9] Annabell Berger. The connection between the number of realizations for degree
sequences and majorization. CoRR, abs/1212.5443, 2012.
[10] Nirupama S. Bhave, Bhagyashri Y. Bam, and Charusheela M. Deshpande. A
characterization of degree sequences of linear hypergraphs. J. Indian Math. Soc.
(N.S.), 75(1-4):151–160 (2009), 2008.
[11] Halina Bielak. Minimal realizations of graphs as central subgraphs. In Graphs,
˙
hypergraphs and matroids (Zaga´
n, 1985), pages 13–24. Higher College Engrg.,
Zielona G´ora, 1985.
[12] David Billington. Lattices and degree sequences of uniform hypergraphs. Ars
Combin., 21(A):9–19, 1986. Thirteenth Australasian conference on combinatorial
mathematics and computing (Sydney, 1985).
[13] David Billington. Conditions for degree sequences to be realizable by 3-uniform
hypergraphs. J. Combin. Math. Combin. Comput., 3:71–91, 1988.
[14] B´ela Bollob´as. The diameter of random graphs. Trans. Amer. Math. Soc.,
267(1):41–52, 1981.
[15] Fred Buckley. The central ratio of a graph. Discrete Math., 38(1):17–21, 1982.

113
[16] Fred Buckley. Self-centered graphs. In Graph theory and its applications: East
and West (Jinan, 1986), volume 576 of Ann. New York Acad. Sci., pages 71–78.
New York Acad. Sci., New York, 1989.
[17] Fred Buckley and Frank Harary. Distance in graphs. Addison-Wesley Publishing
Company, Advanced Book Program, Redwood City, CA, 1990.
[18] Fred Buckley, Zevi Miller, and Peter J. Slater. On graphs containing a given
graph as center. J. Graph Theory, 5(4):427–434, 1981.
[19] Arthur Busch, Michael Ferrara, Stephen Hartke, Michael Jacobson, Hemanshu
Kaul, and Douglas West. Packing of graphic n-tuples. J. Graph Theory, 70(1):29–
39, 2012.
[20] Sergio Cabello and G¨
unter Rote. Obnoxious centers in graphs. SIAM J. Discrete
Math., 24(4):1713–1730, 2010.
[21] Hatice Calik and Barbaros C. Tansel. Double bound method for solving the pcenter location problem. Computers & Operations Research, 40(12):2991 – 2999,
2013.
[22] Gerard J. Chang. Centers of chordal graphs. Graphs Combin., 7(4):305–313,
1991.
[23] Gary Chartrand, Garry L. Johns, Song Lin Tian, and Steven J. Winters. Directed
distance in digraphs: centers and medians. J. Graph Theory, 17(4):509–521,
1993.
[24] Zhibo Chen. On the problem of the existence of a graph H with A(H) = 3. J.
Math. (Wuhan), 4(3):267–272, 1984.

114
[25] Sheshayya Choudum. On graphic and 3-hypergraphic sequences. Discrete Math.,
87(1):91–95, 1991.
[26] Maria Chudnovsky, Neil Robertson, Paul Seymour, and Robin Thomas. The
strong perfect graph theorem. Ann. of Math. (2), 164(1):51–229, 2006.
[27] Maria Chudnovsky and Paul Seymour. The structure of claw-free graphs. In
Surveys in combinatorics 2005, volume 327 of London Math. Soc. Lecture Note
Ser., pages 153–171. Cambridge Univ. Press, Cambridge, 2005.
[28] V´aclav Chv´atal and Peter L. Hammer. Aggregation of inequalities in integer
programming. In Studies in integer programming (Proc. Workshop, Bonn, 1975),
pages 145–162. Ann. of Discrete Math., Vol. 1. North-Holland, Amsterdam, 1977.
[29] Charles J. Colbourn, William L. Kocay, and Douglas R. Stinson. Some NPcomplete problems for hypergraph degree sequences.

Discrete Appl. Math.,

14(3):239–254, 1986.
[30] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein.
Introduction to algorithms. MIT Press, Cambridge, MA, third edition, 2009.
[31] Alexander K. Dewdney. Degree sequences in complexes and hypergraphs. Proc.
Amer. Math. Soc., 53(2):535–540, 1975.
[32] Christoph D¨
urr, Flavio Gui˜
nez, and Mart´ın Matamala. Reconstructing 3-colored
grids from horizontal and vertical projections is NP-hard. In Algorithms—ESA
2009, volume 5757 of Lecture Notes in Comput. Sci., pages 776–787. Springer,
Berlin, 2009.
[33] Paul Erd˝os and Tibor Gallai. Graphs with prescribed degrees of vertices (hungarian). Mat. Lapok, 11:264–274, 1960.

115
[34] Paul Erd˝os, Andr´as Hajnal, and John W. Moon. A problem in graph theory.
Amer. Math. Monthly, 71:1107–1110, 1964.
[35] P´eter L. Erd˝os, Istv´an Mikl´os, and Zolt´an Toroczkai. A simple Havel-Hakimi type
algorithm to realize graphical degree sequences of directed graphs. Electron. J.
Combin., 17(1):Research Paper 66, 10, 2010.
[36] Jill R. Faudree, Ralph J. Faudree, and John R. Schmitt. A survey of minimum
saturated graphs. Electron. J. Combin., Dynamic Survey 18, 2011.
[37] Robert W. Floyd. Algorithm 97: Shortest path. Commun. ACM, 5(6):345–,
June 1962.
[38] St´ephanie F¨oldes and Peter L. Hammer. On split graphs and some related questions. In Probl´emes Combinatoires et Th´eorie Des Graphes, volume 260 of Colloques internationaux C.N.R.S., pages 138–140, Orsay, France, 1976.
[39] Delbert R. Fulkerson, Alan J. Hoffman, and Michael H. McAndrew. Some properties of graphs with multiple edges. Canad. J. Math., 17:166–177, 1965.
[40] Irving Gabelman. The functional behavior of majority (threshold) elements. PhD
thesis, Syracuse U, 1961.
[41] GLPK (GNU linear programming kit), version 4.44, 2015. http://www.gnu.
org/software/glpk.
[42] Martin Charles Golumbic. Trivially perfect graphs. Discrete Math., 24(1):105–
107, 1978.
[43] Catherine S. Greenhill. The switch markov chain for sampling irregular graphs.
CoRR, abs/1412.5249, 2014.

116
[44] Seifollah L. Hakimi. On realizability of a set of integers as degrees of the vertices
of a linear graph. I. J. Soc. Indust. Appl. Math., 10:496–506, 1962.
[45] Thomas C. Hales.

A proof of the Kepler conjecture.

Ann. of Math. (2),

162(3):1065–1185, 2005.
[46] Frank Harary and Phillip A. Ostrand. The cutting center theorem for trees.
Discrete Math., 1(1):7–18, 1971/72.
ˇ
[47] V´aclav Havel. A remark on the existence of finite graphs (czech). Casopis
Pˇest.
Mat., 80:477–480, 1955.
[48] Sandra Mitchell Hedetniemi, Stephen T. Hedetniemi, and Peter J. Slater. Centers
and medians of C(n) -trees. Utilitas Math., 21:225–234, 1982.
[49] IBM ILOG CPLEX Optimizer, version 12.6.0.0.

http://www-01.ibm.com/

software/integration/optimization/cplex-optimizer/, Last 2015.
[50] Thenkarai N. Janakiraman. On self-centered graphs. J. Ramanujan Math. Soc.,
7(1):83–92, 1992.
[51] Mark Jerrum and Alistair Sinclair. Fast uniform generation of regular graphs.
Theoretical Computer Science, 73(1):91 – 100, 1990.
[52] Ravi Kannan, Prasad Tetali, and Santosh Vempala. Simple Markov-chain algorithms for generating bipartite graphs and tournaments. Random Structures
Algorithms, 14(4):293–308, 1999.
[53] Petteri Kaski and Olli Pottonen. libexact users guide, version 1.0, 2008. http:
//koti.kapsi.fi/pottonen/libexact.html.

117
[54] L´aszl´o K´aszonyi and Zsolt Tuza. Saturated graphs with minimal number of
edges. J. Graph Theory, 10(2):203–210, 1986.
[55] Sandi Klavˇzar, Kishori P. Narayankar, and Hanumappa B. Walikar. Almost
self-centered graphs. Acta Math. Sin. (Engl. Ser.), 27(12):2343–2350, 2011.
[56] Daniel J. Kleitman and Da-Lun Wang. Algorithms for constructing graphs and
digraphs with given valences and factors. Discrete Math., 6:79–88, 1973.
[57] William Kocay and Pak Ching Li. On 3-hypergraphs with equal degree sequences.
Ars Combin., 82:145–157, 2007.
[58] Georgy N. Kopylov and Eugeniy A. Timofeev. Centers and radii of graphs.
Uspehi Mat. Nauk, 32(6(198)):226, 1977.
[59] Alexandr Kostochka, Christopher Stocker, and Peter Hamburger. A hypergraph
version of a graph packing theorem by Bollob´as and Eldridge. J. Graph Theory,
74(2):222–235, 2013.
[60] Clement W. H. Lam, Larry Thiel, and Stanley Swiercz. The nonexistence of
finite projective planes of order 10. Canad. J. Math., 41(6):1117–1123, 1989.
[61] Renu Laskar and Douglas Shier. On powers and centers of chordal graphs. Discrete Appl. Math., 6(2):139–147, 1983.
[62] Cornelis G. Lekkerkerker and Jan Ch. Boland. Representation of a finite graph
by a set of intervals on the real line. Fund. Math., 51:45–64, 1962/1963.
[63] Xiang Wu Liu. A class of graphs with α(H) = 4 that are not trees. Natur. Sci.
J. Harbin Normal Univ., 9(3):1–5, 1993.

118
[64] Xiang Wu Liu. Sufficient conditions for a graph to satisfy a(H) = 3. Natur. Sci.
J. Harbin Normal Univ., 9(2):7–12, 1993.
[65] Xiang Wu Liu. Classifications of a class of graphs H according to the parameter
a(H). Heilongjiang Daxue Ziran Kexue Xuebao, 13(4):10–12, 1996.
[66] Xiang Wu Liu. Determination of the value of a(H) for a class of graphs by
longitude and latitude of vertices. Natur. Sci. J. Harbin Normal Univ., 14(6):1–
4, 1998.
[67] Xiang Wu Liu and Yu Xin He. Two classes of graphs satisfying A(H) = 3. J.
Math. (Wuhan), 9(4):423–430, 1989.
[68] Nadimpalli V. R. Mahadev and Uri N. Peled. Threshold graphs and related topics,
volume 56 of Annals of Discrete Mathematics. North-Holland Publishing Co.,
Amsterdam, 1995.
[69] Ryan R. Martin and Jason J. Smith. Induced saturation number. Discrete Math.,
312(21):3096–3106, 2012.
[70] Brendan D. McKay and Adolfo Piperno. Practical graph isomorphism, II. J.
Symbolic Comput., 60:94–112, 2014.
[71] Julius Petersen. Die Theorie der regul¨aren graphs. Acta Math., 15(1):193–220,
1891.
[72] Monika Pil´sniak and Mariusz Wo´zniak. A note on packing of two copies of a
hypergraph. Discuss. Math. Graph Theory, 27(1):45–49, 2007.
[73] Monika Pil´sniak and Mariusz Wo´zniak. On packing of two copies of a hypergraph.
Discrete Math. Theor. Comput. Sci., 13(3):67–74, 2011.

119
[74] Ruth Pordes, Don Petravick, Bill Kramer, Doug Olson, Miron Livny, Alain Roy,
Paul Avery, Kent Blackburn, Torre Wenaus, Frank Wrthwein, Ian Foster, Rob
Gardner, Mike Wilde, Alan Blatecky, John McGee, and Rob Quick. The Open
Science Grid. Journal of Physics: Conference Series, 78(1):012057, 2007.
[75] Andrzej Proskurowski. Centers of 2-trees. Ann. Discrete Math., 9:1–5, 1980.
Combinatorics 79 (Proc. Colloq., Univ. Montr´eal, Montreal, Que., 1979), Part
II.
[76] Jaideep Ray, Ali Pinar, and Comandur Seshadhri. Are we there yet? When
to stop a Markov chain while generating random graphs. In Anthony Bonato
and Jeannette Janssen, editors, Algorithms and Models for the Web Graph, volume 7323 of Lecture Notes in Computer Science, pages 153–164. Springer Berlin
Heidelberg, 2012.
[77] Neil Robertson, Daniel Sanders, Paul Seymour, and Robin Thomas. The fourcolour theorem. J. Combin. Theory Ser. B, 70(1):2–44, 1997.
[78] Valerio Schiavoni. A fast Java implementation of Floyd-Warshall. http://www.
jroller.com/vschiavoni/entry/a_fast_java_implementation_of, November 25, 2008.

(Archived by WebCite at http://www.webcitation.org/

6Pjp76C70).
[79] Gerard Sierksma and Han Hoogeveen. Seven criteria for integer sequences being
graphic. J. Graph Theory, 15(2):223–231, 1991.
[80] Peter J. Slater. Some definitions of central structures. In KheeMeng Koh and
HianPoh Yap, editors, Graph Theory Singapore 1983, volume 1073 of Lecture
Notes in Mathematics, pages 169–178. Springer Berlin Heidelberg, 1984.

120
[81] William A. Stein et al. Sage Mathematics Software (Version 5.8). The Sage
Development Team, 2015. http://www.sagemath.org.
[82] Paul Tur´an. Eine Extremalaufgabe aus der Graphentheorie. Mat. Fiz. Lapok,
48:436–452, 1941.
[83] Stephen Warshall. A theorem on boolean matrices. J. Assoc. Comput. Mach.,
9:11–12, 1962.
[84] Douglas B. West. Introduction to graph theory. Prentice Hall, Inc., Upper Saddle
River, NJ, 2nd edition, 2001.
[85] Elliot S. Wolk. The comparability graph of a tree. Proc. Amer. Math. Soc.,
13:789–795, 1962.
[86] Jian-Hua Yin and Jiong-Sheng Li. Two sufficient conditions for a graphic sequence to have a realization with prescribed clique size. Disc. Math., 301:218–
227, 2005.
[87] Zhen Guo Zhang, Huan Xing, and Xiang Wu Liu. An infinite class of graphs
with A(H) = 3. Natur. Sci. J. Harbin Normal Univ., 19(6):11–12, 21, 2003.

