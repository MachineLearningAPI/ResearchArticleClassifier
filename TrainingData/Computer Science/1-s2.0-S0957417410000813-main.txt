Expert Systems with Applications 37 (2010) 5682–5687

Contents lists available at ScienceDirect

Expert Systems with Applications
journal homepage: www.elsevier.com/locate/eswa

Chaotic bee colony algorithms for global numerical optimization
Bilal Alatas *
Firat University, Faculty of Engineering, Department of Computer Engineering, 23119 Elazig, Turkey

a r t i c l e

i n f o

Keywords:
Bee colony algorithm
Global numerical optimization
Chaos

a b s t r a c t
Artiﬁcial bee colony (ABC) is the one of the newest nature inspired heuristics for optimization problem.
Like the chaos in real bee colony behavior, this paper proposes new ABC algorithms that use chaotic maps
for parameter adaptation in order to improve the convergence characteristics and to prevent the ABC to
get stuck on local solutions. This has been done by using of chaotic number generators each time a random number is needed by the classical ABC algorithm. Seven new chaotic ABC algorithms have been proposed and different chaotic maps have been analyzed in the benchmark functions. It has been detected
that coupling emergent results in different areas, like those of ABC and complex dynamics, can improve
the quality of results in some optimization problems. It has been also shown that, the proposed methods
have somewhat increased the solution quality, that is in some cases they improved the global searching
capability by escaping the local solutions.
Ó 2010 Elsevier Ltd. All rights reserved.

1. Introduction
An optimization problem is modeled in such a way that a classical algorithm, which requires several assumptions and/or modiﬁcations which might not be easy to validate in many situations, can
handle it. These assumptions and/or modiﬁcations on the original
optimization problem parameters (rounding variables, softening
constraints, etc.) certainly affect the solution quality (Baykasoglu,
Ozbakir, & Tapkan, 2007). They are insufﬁcient if integer and/or
discrete decision variables are required in optimization models
(Baykasoglu et al., 2007). Namely, classical optimization algorithms are inﬂexible to adapt the solution procedure to an optimization problem.
Furthermore, solution strategies of classical optimization algorithms are generally depended on the type of objective and constraint functions (linear, non-linear, etc.) and the type of
variables used in the problem modeling (integer, real, etc.). Their
efﬁciency is also very much dependent on the size of the solution
space, number of variables and constraints used in the problem
modeling, and the structure of the solution space (convex, nonconvex, etc.). Namely, they do not offer general solution strategies
that can be applied to problem formulations where, different type
of variables, objective and constraint functions are used. However,
most of the optimization problems require different types of variables, objective and constraint functions simultaneously in their
formulation (Baykasoglu et al., 2007).
Inefﬁciency of classical optimization algorithms in solving larger scale and/or highly non-linear problems forced researchers to
* Tel.: +90 424 237 00 00/6307.
E-mail address: balatas@ﬁrat.edu.tr
0957-4174/$ - see front matter Ó 2010 Elsevier Ltd. All rights reserved.
doi:10.1016/j.eswa.2010.02.042

ﬁnd more ﬂexible and adaptable, problem and model independent,
general purpose heuristic algorithms. These algorithms are efﬁcient and ﬂexible and they can be modiﬁed and/or adapted to suit
speciﬁc problem requirements. Researches on these algorithms are
still continuing all around the globe. Fig. 1 shows the classiﬁcations
of the heuristic algorithms.
Swarm intelligence that combines of biology and social based
heuristics has become a research interest to many research scientists of related ﬁelds in recent years (Abbass, 2001). Particle swarm
optimization, ant colony optimization, and bee colony algorithms
can be considered as subﬁelds of swarm intelligence. A few models
have been developed to model the intelligent behaviors of honeybee swarms and applied for solving the problems (Abbass, 2001;
Karaboga, 2005; Karaboga & Basturk, 2008; Pai, Yang, & Chang,
2009; Pham et al., 2006; Yang, 2005). Recently proposed artiﬁcial
bee colony (ABC) algorithm has been inspired by the intelligent
behavior of real honey bees and proven to be a better heuristic
for global numerical optimization (Karaboga, 2005; Karaboga &
Basturk, 2008).
Many chaotic maps in the literature possess certainty, ergodicity and the stochastic property. Recently, chaotic sequences have
been adopted instead of random sequences and very interesting
and somewhat good results have been shown in many applications. They have also been used together with some heuristic optimization algorithms (Alatas, Akin, & Ozer, 2009; Coelho & Mariani,
2008) to express optimization variables. The choice of chaotic sequences is justiﬁed theoretically by their unpredictability, i.e., by
their spread-spectrum characteristic, non periodic, complex temporal behavior, and ergodic properties.
In this paper, sequences generated from different chaotic systems substitute random numbers for different parameters of ABC

B. Alatas / Expert Systems with Applications 37 (2010) 5682–5687

5683

Fig. 1. Heuristic algorithms.

where it is necessary to make a random-based choice. For this purpose, different ABC methods that use chaotic maps as efﬁcient
alternatives to pseudorandom sequences have been proposed. By
this way, it is intended to enhance the global convergence and to
prevent to stick on a local solution. However, in general, it is hard
to estimate how good most chaotic random number generator by
applying statistical tests are, as they do not follow the uniform distribution. The simulation results show that the application of
deterministic chaotic signals instead of random sequences may
be a possible strategy to improve the performances of ABC.
The remaining of this paper is organized as follows. Review of
ABC is summarized in Section 2. Section 3 describes the proposed
methods, Chaotic bee colony algorithms, shortly CBCAs. Section 4
describes the benchmark problems used for comparisons of the
proposed methods. In Section 5, the testing of the proposed methods through benchmark problems are carried out and the simulation results are compared. Finally, the conclusions are drawn
based on the comparison analysis reported and presented in Section 6.

2. Artiﬁcial bee colony algorithm
ABC algorithm has been inspired by the intelligent behavior of
real honey bees (Karaboga, 2005; Karaboga & Basturk, 2008). In
the algorithm, the artiﬁcial bee colony consists of three groups of
bees: employed bees, onlookers and scouts. The ﬁrst half of the colony consists of the employed artiﬁcial bees and the second half includes the onlookers. For every food source, there is only one
employed bee. In other words, the number of employed bees is
equal to the number of food sources around the hive. The employed bee whose food source has been exhausted by the bees becomes a scout. The pseudo-code of the algorithm is given in Fig. 2.
Each cycle of the search consists of three steps after initialization step: moving the employed bees onto the food sources and
calculating their nectar amounts; placing the onlookers onto the
food sources and calculating the nectar amounts; and determining

the scout bees and directing them onto possible food sources
(Karaboga, 2005; Karaboga & Basturk, 2008). A food source position represents a possible solution of the problem to be optimized.
The amount of nectar of a food source corresponds to the quality of
the solution represented by that food source. Each employed bee is
moved onto her food source area for determining a new food
source within the neighborhood of the present one, and then its
nectar amount is evaluated. If the nectar amount of the new one
is higher, then bee forgets the previous and memorizes the new
one. Onlookers are placed on the food sources by using a probability based selection process. As the nectar amount of a food source
increases, the probability value with which the food source is preferred by onlookers increases similar to the natural selection process in evolutionary algorithms (Karaboga, 2005; Karaboga &
Basturk, 2008).
Every bee colony has scouts considered as the colony’s explorers that do not have any guidance while looking for food. They
are primarily concerned with ﬁnding any kind of food source. As
a result of such behavior, the scouts are characterized by low
search costs and a low average in food source quality. Occasionally,
the scouts can accidentally discover rich, entirely unknown food
sources. In the case of artiﬁcial bees, the artiﬁcial scouts could have
the fast discovery of the group of feasible solutions as a task. In
ABC, one of the employed bees is selected and classiﬁed as the
scout bee (Karaboga, 2005; Karaboga & Basturk, 2008). The selection is controlled by a control parameter called limit. If a solution
representing a food source is not improved by a predetermined
number of trials, then that food source is abandoned by its employed bee and the employed bee of this food becomes a scout.
The number of trials for releasing a food source is equal to the value of limit which is an important control parameter of ABC. In a robust search process exploration and exploitation processes must
be carried out together. In the ABC algorithm, while onlookers
and employed bees carry out the exploitation process in the search
space, the scouts control the exploration process. These three steps
are repeated until the termination criteria are satisﬁed (Karaboga,
2005; Karaboga & Basturk, 2008).

5684

B. Alatas / Expert Systems with Applications 37 (2010) 5682–5687

Fig. 2. Pseudo-code of ABC algoritm.

running in chaotic state. The chaotic sequence

The ﬂowchart of the ABC algorithm is given in Fig. 3
3. Chaotic bee colony algorithms

fxk : k ¼ 0; 1; 2; . . . ;g

In simulating complex phenomena, sampling, numerical analysis, decision making and especially heuristic optimization needs
random sequences with a long period and good uniformity (Coelho
& Mariani, 2008; Schuster, 1988). Chaos is a deterministic, random-like process found in non-linear, dynamical system, which
is non-period, non-converging and bounded. Moreover, it has a
very sensitive dependence upon its initial condition and parameter
(Coelho & Mariani, 2008; Schuster, 1988). The nature of chaos is
apparently random and unpredictable and it also possesses an element of regularity. Mathematically, chaos is randomness of a simple deterministic dynamical system and chaotic system may be
considered as sources of randomness (Coelho & Mariani, 2008;
Schuster, 1988).
A chaotic map is a discrete-time dynamical system

can be used as spread-spectrum sequence as random number
sequence.
Chaotic sequences have been proven easy and fast to generate
and store, there is no need for storage of long sequences (Heidari-Bateni & McGillem, 1994). Merely a few functions (chaotic maps)
and few parameters (initial conditions) are needed even for very
long sequences. In addition, an enormous number of different sequences can be generated simply by changing its initial condition.
Moreover these sequences are deterministic and reproducible.
Recently, chaotic sequences have been adopted instead of random sequences and very interesting and somewhat good results
have been shown in many applications such as secure transmission
(Suneel, 2006; Wong, Man, Li, & Liao, 2005), and nonlinear circuits
(Arena, Caponetto, Fortuna, Rizzo, & La Rosa, 2000), DNA computing (Manganaro & de Gyvez, 1997), image processing (Han,
Hu, Yu, & Wang, 2007). The choice of chaotic sequences is justiﬁed

xkþ1 ¼ f ðxk Þ;

0 < xk < 1;

k ¼ 0; 1; 2; . . .

ð1Þ

B. Alatas / Expert Systems with Applications 37 (2010) 5682–5687

5685

Fig. 3. The ﬂowchart of the ABC algorithm.

theoretically by their unpredictability, i.e., by their spread-spectrum
characteristic and ergodic properties.
Randomly initializing of ABC and the limit parameter that is adjusted in initialization step that cannot be changed during new
iterations may affect the algorithm performance on convergence
speed. This paper provides new approaches introducing chaotic
maps with ergodicity, irregularity and the stochastic property in
ABC to improve the global convergence by escaping the local solu-

Table 1
Deﬁnitions of the used chaotic maps.
Name

Deﬁnition

Logistic map
Circle map
Gauss map

Xn+1 = 4Xn(1 À Xn)
X nþ1 ¼ X n þ 1:2 À ð0:5=2pÞ sinð2pX n Þmodð1Þ
&
j k
0;
Xn ¼ 0
1=X n modð1Þ ¼ X1n À X1n
X nþ1 ¼
1=X n modð1Þ; X n 2 ð0; 1Þ;

Henon map

X nþ1 ¼ 1 À 1:4X 2n þ 0:3X nÀ1
X nþ1 ¼ sinðpxn Þ

Sinusoidal
iterator
Sinus map
Tent map

X nþ1 ¼ 2:3ðX n Þ2SinðpX n Þ
&
X n =0:7;
X nþ1 ¼
10=3X n ð1 À X n Þ;

X n < 0:7
otherwise

tions. The use of chaotic sequences in ABC can be helpful to escape
more easily from local minima than can be done through the classical ABC. The selected chaotic maps tat produce chaotic numbers
in (0, 1) for the experiments have been listed in Table 1.
New chaotic ABC (CABC) algorithms may be simply classiﬁed
and described as follows:
3.1. Chaotic ABC 1 (CABC1)
Initial artiﬁcial colony is generated by iterating the selected
chaotic maps until reaching to the colony size as shown in Fig. 4.
N is the dimension for the problem; i is the colony member; and
j is the dimension. xi,j is the jth dimension of the ith colony
member
3.2. Chaotic ABC 2 (CABC2)
In this algorithm, if a solution representing a food source is not
improved by limit/2 trials, then that food source is abandoned by
its employed bee and the scout of this employed bee starts chaotic
search for limit/2 iterations. xi,j is the jth dimension of the ith colony member. ci,j is the chaotic number generated by treating the

Fig. 4. Pseudo-code of CABC1 change to original ABC.

5686

B. Alatas / Expert Systems with Applications 37 (2010) 5682–5687

Fig. 5. Pseudo-code of chaotic search for the bees.

Table 2
Properties of test problems, lb indicates lower bound, ub indicates upper bound, opt indicates optimum point.
Function no

Function name

1

Rosenbrock

2

Griewangk

3

Rastrigin

Deﬁnition
P
2
2 2
f1 ðxÞ ¼ N
i¼1 100ðxiþ1 À xi Þ þ ð1 À xi Þ
 
PN  x2i  QN
x
f2 ðxÞ ¼ i¼1 4000 À i¼1 cos piﬃi þ 1
Á
P À 2
f3 ðxÞ ¼ 10 Â N þ N
i¼1 xi À 10 Á cosð2pxi Þ

selected chaotic map for the jth dimension of the ith colony member. Fig. 5 depicts the pseudo-code of chaotic search for the bees.
3.3. Chaotic ABC 3 (CABC3)
CABC1 and CABC2 are combined, that is initial colony is generated by iterating the selected chaotic maps and chaotic search is
applied in case of not obtaining improvements.
4. Test problems

5. Experimental results
Selected three benchmark problems are solved by simulating
the ABC, CABC1, and CABC2 algorithms. Two criteria are applied
to terminate the simulation of the algorithms: reaching maximum
Table 3
Success rates of ABC algorithms for test functions.
Qlevel

Rosenbrock (N = 2)

Griewangk (N = 10)

Rastrigin (N = 10)

1.eÀ5
1.eÀ6

0
0

13
13

75
60

ub

opt

Property

2.48

0

Unimodal

À50

50

0

Multimodal

À50

50

0

Multimodal

number of iterations which is set to a constant number and the
second criterion is getting a minimum error.
All ABC was initialized in regions that include the global optimum for a fair evaluation. The algorithms were run for 100 times
to catch their stochastic properties. In this experiment, maximum
iteration number was set to 500 and the goal is not to ﬁnd the global optimum values but to ﬁnd out the potential of the algorithms.
Algorithm success rate deﬁned in Eq. (2) has been used for comparison of the results obtained from different ABC algorithms.

S ¼ 100

Well-deﬁned benchmark functions which are based on mathematical functions can be used as objective functions to measure
and test the performance of optimization methods. The nature,
complexity and other properties of these benchmark functions
can be easily obtained from their deﬁnitions. The difﬁculty levels
of most benchmark functions are adjustable by setting their
parameters. From the standard set of benchmark problems available in the literature, three important functions one of which is
unimodal (containing only one optimum) ant two of which are
multimodal (containing many local optima, but only one global
optimum) are considered to test the efﬁcacy of the proposed methods. Table 2 shows the main properties of the selected benchmark
functions used in the experiments.

lb
À2.48


NT successful 
:
NT all Q lev el

ð2Þ

Table 4
Success rates of CABC algorithms using different chaotic maps for Rosenbrock (N = 2).
Qlevel

CABC1

CABC2

CABC3

Logistic map
1.eÀ5
1.eÀ6

0
0

6
4

6
4

Circle map
1.eÀ5
1.eÀ6

1
1

5
4

4
4

Gauss map
1.eÀ5
1.eÀ6

1
1

6
5

7
6

Henon map
1.eÀ5
1.eÀ6

2
1

4
3

5
3

Sinusoidal iterator
1.eÀ5
1.eÀ6

0
0

4
2

4
3

Sinus map
1.eÀ5
1.eÀ6

0
0

6
5

5
5

Tent map
1.eÀ5
1.eÀ6

0
0

6
4

6
5

B. Alatas / Expert Systems with Applications 37 (2010) 5682–5687
Table 5
Success rates of CABC algorithms using different chaotic maps for Griewangk (N = 10).
Qlevel

CABC1

CABC2

CABC3

Logistic map
1.eÀ5
1.eÀ6

16
10

26
23

25
22

Circle map
1.eÀ5
1.eÀ6

14
14

18
16

17
17

Gauss map
1.eÀ5
1.eÀ6

18
8

26
23

23
21

Henon map
1.eÀ5
1.eÀ6

18
13

28
21

28
26

Sinusoidal iterator
1.eÀ5
1.eÀ6

19
14

25
18

23
20

Sinus map
1.eÀ5
1.eÀ6

16
8

28
19

27
19

Tent map
1.eÀ5
1.eÀ6

17
13

23
15

23
16

Table 6
Success rates of CABC algorithms using different chaotic maps for Rastrigin (N = 10).
Qlevel

CABC1

CABC2

CABC3

Logistic map
1.eÀ5
1.eÀ6

69
59

91
85

89
69

Circle map
1.eÀ5
1.eÀ6

68
61

90
84

88
81

Gauss map
1.eÀ5
1.eÀ6

76
58

95
84

91
82

Henon map
1.eÀ5
1.eÀ6

65
46

89
82

89
86

Sinusoidal iterator
1.eÀ5
1.eÀ6

72
70

88
79

89
86

Sinus map
1.eÀ5
1.eÀ6

26
25

92
81

92
86

Tent map
1.eÀ5
1.eÀ6

72
56

88
79

87
79

Nsuccessful is the number of trials, which found the solution on the
Qlevel in the allowable maximum iteration. Nall is the number of all
trials. Qlevel is the end condition to stop the algorithm, when it converges into Qlevel tolerance.
The colony size for the algorithms has been selected as 20. Limit
parameter for ABC is selected as 40. Table 3 depicts the success
rates of ABC algorithms for the test functions. Success rates of CABC
algorithms using different chaotic maps for Rosenbrock function
are shown in Table 4. CABC algorithms have somewhat shown better performance than ABC algorithm for this test function. Especially, all of the results obtained from CABC2 and CABC3
algorithms are better than that from ABC algorithm.

5687

Success rates of CABC algorithms using different chaotic maps
for Griewangk and Rastrigin functions are shown in Tables 5 and
Table 6, respectively. Similar to the results obtained from Rosenbrock test function, CABC algorithms have somewhat shown better
performance than ABC algorithm. Especially, all of the results obtained from CABC2 and CABC3 algorithms are better than that from
ABC algorithm.
6. Conclusions
In this paper different chaotic maps have been embedded to
adapt the parameters of ABC algorithm. This has been done by
using of chaotic number generators. Two new chaotic ABC algorithms have been proposed and seven chaotic maps have been analyzed in the benchmark functions. It has been detected that
coupling emergent results in different areas, like those of ABC
and complex dynamics, can improve the quality of results in some
optimization problems and also that chaos may be a desired process as in real honey bee colony. It has been also shown that, these
methods have somewhat increased the solution quality, that is in
some cases they improved the global searching capability by
escaping the local solutions. These proposed methods are new
and more elaborated experiments may be performed with parallel
or distributed implementation.
References
Abbass, H. A. (2001). MBO: Marriage in honey bees optimization – A Haplometrosis
polygynous swarming approach. IEEE Congress on Evolutionary Computation, 1,
207–214.
Alatas, B., Akin, E., & Ozer, B. (2009). Chaos embedded particle swarm optimization
algorithms. Chaos, Solitons & Fractals. doi:10.1016/j.chaos.2007.09.063.
Arena, P., Caponetto, R., Fortuna, L., Rizzo, A., & La Rosa, M. (2000). Self organization
in non recurrent complex system. International Journal of Bifurcation and Chaos,
10(5), 1115–1125.
Baykasoglu, A., Ozbakir, L., & Tapkan, P. (2007). Artiﬁcial bee colony algorithm and
its application to generalized assignment problem. In Felix T. S. Chan & Manoj
Kumar Tiwari (Eds.), Swarm intelligence: Focus on Ant and particle swarm
optimization (pp. 532). Itech Education and Publishing (chap. 8).
Coelho, L. S., & Mariani, V. C. (2008). Use of chaotic sequences in a biologically
inspired algorithm for engineering design optimization. Expert Systems with
Applications, 34, 1905–1913.
Han, F., Hu, J., Yu, X., & Wang, Y. (2007). Fingerprint images encryption via multiscroll chaotic attractors. Applied Mathematics and Computation, 185(2), 931–939.
Heidari-Bateni, G., & McGillem, C. D. (1994). A Chaotic direct-sequence spread
spectrum communication system. IEEE Transaction on Communications, 42(2/3/
4), 1524–1527.
Karaboga, D. (2005). An idea based on honey bee swarm for numerical optimization
technical report-TR06. Erciyes University, Engineering Faculty, Computer
Engineering Department.
Karaboga, D., & Basturk, B. (2008). On the performance of artiﬁcial bee colony (ABC)
algorithm. Applied Soft Computing, 8, 687–697.
Manganaro, G., & de Gyvez, J. P. (1997). DNA computing based on chaos. In IEEE
International conference on evolutionary computation (pp. 255–260). Piscataway,
NJ: IEEE Press.
Pai, P. F., Yang, S. L., & Chang, P. T. (2009). Forecasting output of integrated circuit
industry by support vector regression models with marriage honeybees optimization algorithms. Expert Systems with Applications, 36(7), 10746–
10751.
Pham, D. T., Kog, E., Ghanbarzadeh, A., Otri, S., Rahim, S., & Zaidi, M. (2006). The bees
algorithm – A novel tool for complex optimisation problems. In IPROMS 2006
proceeding 2nd international virtual conference on intelligent production machines
and systems. Oxford: Elsevier.
Schuster, H. G. (1988). Deterministic chaos: An introduction (2nd revised ed.). Federal
Republic of Germany: Physick-Verlag, GmnH, Weinheim.
Suneel, M. (2006). Chaotic sequences for secure CDMA. Ramanujan Institute for
Advanced Study in Mathematics, 1–4.
Wong, K., Man, K. P., Li, S., & Liao, X. (2005). More secure chaotic cryptographic
scheme based on dynamic look-up table circuits. Systems & Signal Processing,
24(5), 571–584.
Yang, X. (2005). Engineering optimizations via nature-inspired virtual bee algorithms,
Lecture notes in computer science (Vol. 3562, pp. 317–323). Springer-Verlag,
GmbH.

